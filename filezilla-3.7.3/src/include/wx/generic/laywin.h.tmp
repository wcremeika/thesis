
#__FILE__ _"C:\Users\Billy\Dropbox\Thesis\Projects\filezilla-3.7.3\src\include\wx\generic\laywin.h" 0
/////////////////////////////////////////////////////////////////////////////
// Name:        wx/generic/laywin.h
// Purpose:     Implements a simple layout algorithm, plus
//              wxSashLayoutWindow which is an example of a window with
//              layout-awareness (via event handlers). This is suited to
//              IDE-style window layout.
// Author:      Julian Smart
// Modified by:
// Created:     04/01/98
// Copyright:   (c) Julian Smart
// Licence:     wxWindows licence
/////////////////////////////////////////////////////////////////////////////

                       
                       

              
                           
       // wxUSE_SASH

                    

class WXDLLIMPEXP_FWD_ADV wxQueryLayoutInfoEvent;
class WXDLLIMPEXP_FWD_ADV wxCalculateLayoutEvent;

wxDECLARE_EXPORTED_EVENT( WXDLLIMPEXP_ADV, wxEVT_QUERY_LAYOUT_INFO, wxQueryLayoutInfoEvent );
wxDECLARE_EXPORTED_EVENT( WXDLLIMPEXP_ADV, wxEVT_CALCULATE_LAYOUT,  wxCalculateLayoutEvent );

enum wxLayoutOrientation
{
    wxLAYOUT_HORIZONTAL,
    wxLAYOUT_VERTICAL
};

enum wxLayoutAlignment
{
    wxLAYOUT_NONE,
    wxLAYOUT_TOP,
    wxLAYOUT_LEFT,
    wxLAYOUT_RIGHT,
    wxLAYOUT_BOTTOM
};

// Not sure this is necessary
// Tell window which dimension we're sizing on
                                      
                                      

// Use most recently used length
                                      

// Only a query, so don't actually move it.
                                      

/*
 * This event is used to get information about window alignment,
 * orientation and size.
 */

class WXDLLIMPEXP_ADV wxQueryLayoutInfoEvent: public wxEvent
{
public:
    wxQueryLayoutInfoEvent(wxWindowID id = 0)
    {
        SetEventType(wxEVT_QUERY_LAYOUT_INFO);
        m_requestedLength = 0;
        m_flags = 0;
        m_id = id;
        m_alignment = wxLAYOUT_TOP;
        m_orientation = wxLAYOUT_HORIZONTAL;
    }

    // Read by the app
    void SetRequestedLength(int length) { m_requestedLength = length; }
    int GetRequestedLength() const { return m_requestedLength; }

    void SetFlags(int flags) { m_flags = flags; }
    int GetFlags() const { return m_flags; }

    // Set by the app
    void SetSize(const wxSize& size) { m_size = size; }
    wxSize GetSize() const { return m_size; }

    void SetOrientation(wxLayoutOrientation orient) { m_orientation = orient; }
    wxLayoutOrientation GetOrientation() const { return m_orientation; }

    void SetAlignment(wxLayoutAlignment align) { m_alignment = align; }
    wxLayoutAlignment GetAlignment() const { return m_alignment; }

    virtual wxEvent *Clone() const { return new wxQueryLayoutInfoEvent(*this); }

protected:
    int                     m_flags;
    int                     m_requestedLength;
    wxSize                  m_size;
    wxLayoutOrientation     m_orientation;
    wxLayoutAlignment       m_alignment;

private:
    DECLARE_DYNAMIC_CLASS_NO_ASSIGN(wxQueryLayoutInfoEvent)
};

typedef void (wxEvtHandler::*wxQueryLayoutInfoEventFunction)(wxQueryLayoutInfoEvent&);

                                                                                                              


                                                                                                                                                                


/*
 * This event is used to take a bite out of the available client area.
 */

class WXDLLIMPEXP_ADV wxCalculateLayoutEvent: public wxEvent
{
public:
    wxCalculateLayoutEvent(wxWindowID id = 0)
    {
        SetEventType(wxEVT_CALCULATE_LAYOUT);
        m_flags = 0;
        m_id = id;
    }

    // Read by the app
    void SetFlags(int flags) { m_flags = flags; }
    int GetFlags() const { return m_flags; }

    // Set by the app
    void SetRect(const wxRect& rect) { m_rect = rect; }
    wxRect GetRect() const { return m_rect; }

    virtual wxEvent *Clone() const { return new wxCalculateLayoutEvent(*this); }

protected:
    int                     m_flags;
    wxRect                  m_rect;

private:
    DECLARE_DYNAMIC_CLASS_NO_ASSIGN(wxCalculateLayoutEvent)
};

typedef void (wxEvtHandler::*wxCalculateLayoutEventFunction)(wxCalculateLayoutEvent&);

                                                                                                        

                                                                                                                                                              


              

                                                                               
                                                                                    
                          
                                                             
 
       
                        
     
               
     

                                                                                                          
                                                                                                                             
     
                                                   
     

                                                                                                   
                                                                                                                              

            
                                                                         
                                                                               

                                                                              
                                                                                      

                                         
                                                                            

                 
                                                                          
                                                                       
                                                          

                                                                           
                                                          

        
                

                                            
                                              
                                              

        
                                                     
                         
  

       // wxUSE_SASH

class WXDLLIMPEXP_FWD_CORE wxMDIParentFrame;
class WXDLLIMPEXP_FWD_CORE wxFrame;

// This class implements the layout algorithm
class WXDLLIMPEXP_ADV wxLayoutAlgorithm: public wxObject
{
public:
    wxLayoutAlgorithm() {}

                          
                                                              
                                                                      
       // wxUSE_MDI_ARCHITECTURE

    // mainWindow is sized to whatever's left over. This function for backward
    // compatibility; use LayoutWindow.
    bool LayoutFrame(wxFrame* frame, wxWindow* mainWindow = NULL);

    // mainWindow is sized to whatever's left over.
    bool LayoutWindow(wxWindow* frame, wxWindow* mainWindow = NULL);
};

      
    // _WX_LAYWIN_H_G_
