
#__FILE__ _"C:\Users\Billy\Dropbox\Thesis\Projects\filezilla-3.7.3\src\include\wx\msw\uxtheme.h" 0
///////////////////////////////////////////////////////////////////////////////
// Name:        wx/msw/uxtheme.h
// Purpose:     wxUxThemeEngine class: support for XP themes
// Author:      John Platts, Vadim Zeitlin
// Modified by:
// Created:     2003
// Copyright:   (c) 2003 John Platts, Vadim Zeitlin
// Licence:     wxWindows licence
///////////////////////////////////////////////////////////////////////////////

                      
                      

                   

                               // we use GetHwndOf()
                           

// Amazingly, GetThemeFont() and GetThemeSysFont() functions use LOGFONTA under
// XP but LOGFONTW (even in non-Unicode build) under later versions of Windows.
// If we declare them as taking LOGFONT below, the code would be able to
// silently pass LOGFONTA to them in ANSI build and would crash at run-time
// under Windows Vista/7 because of a buffer overrun (LOGFONTA being smaller
// than LOGFONTW expected by these functions). If we we declare them as taking
// LOGFONTW, the code wouldn't work correctly under XP. So we use a special
// wxUxThemeFont class to encapsulate this and intentionally change the LOGFONT
// output parameters of the theme functions to take it instead.

class wxUxThemeFont
{
public:
    // Trivial default ctor.
    wxUxThemeFont() { }

    // Just some unique type.
    struct Ptr { };

                 
                                                                     
                          
                                                             
                                                  
      // !wxUSE_UNICODE
    // Return either LOGFONTA or LOGFONTW pointer as required by the current
    // Windows version.
    Ptr *GetPtr()
    {
        return UseLOGFONTW() ? reinterpret_cast<Ptr *>(&m_lfW)
                             : reinterpret_cast<Ptr *>(&m_lfA);
    }

    // This method returns LOGFONT (i.e. LOGFONTA in ANSI build and LOGFONTW in
    // Unicode one) which can be used with other, normal, Windows or wx
    // functions. Internally it may need to transform LOGFONTW to LOGFONTA.
    const LOGFONTA& GetLOGFONT()
    {
        if ( UseLOGFONTW() )
        {
            // Most of the fields are the same in LOGFONTA and LOGFONTW so just
            // copy everything by default.
            memcpy(&m_lfA, &m_lfW, sizeof(m_lfA));

            // But the face name must be converted from Unicode.
            WideCharToMultiByte(CP_ACP, 0, m_lfW.lfFaceName, -1,
                                m_lfA.lfFaceName, sizeof(m_lfA.lfFaceName),
                                NULL, NULL);
        }

        return m_lfA;
    }

private:
    static bool UseLOGFONTW()
    {
        return wxGetWinVersion() >= wxWinVersion_Vista;
    }

    LOGFONTA m_lfA;
       // wxUSE_UNICODE/!wxUSE_UNICODE

private:
    LOGFONTW m_lfW;

    wxDECLARE_NO_COPY_CLASS(wxUxThemeFont);
};

typedef HTHEME  (__stdcall *PFNWXUOPENTHEMEDATA)(HWND, const wchar_t *);
typedef HRESULT (__stdcall *PFNWXUCLOSETHEMEDATA)(HTHEME);
typedef HRESULT (__stdcall *PFNWXUDRAWTHEMEBACKGROUND)(HTHEME, HDC, int, int, const RECT *, const RECT *);
typedef HRESULT (__stdcall *PFNWXUDRAWTHEMETEXT)(HTHEME, HDC, int, int, const wchar_t *, int, DWORD, DWORD, const RECT *);
typedef HRESULT (__stdcall *PFNWXUGETTHEMEBACKGROUNDCONTENTRECT)(HTHEME, HDC, int, int, const RECT *, RECT *);
typedef HRESULT (__stdcall *PFNWXUGETTHEMEBACKGROUNDEXTENT)(HTHEME, HDC, int, int, const RECT *, RECT *);
typedef HRESULT (__stdcall *PFNWXUGETTHEMEPARTSIZE)(HTHEME, HDC, int, int, const RECT *, /* enum */ THEMESIZE, SIZE *);
typedef HRESULT (__stdcall *PFNWXUGETTHEMETEXTEXTENT)(HTHEME, HDC, int, int, const wchar_t *, int, DWORD, const RECT *, RECT *);
typedef HRESULT (__stdcall *PFNWXUGETTHEMETEXTMETRICS)(HTHEME, HDC, int, int, TEXTMETRIC*);
typedef HRESULT (__stdcall *PFNWXUGETTHEMEBACKGROUNDREGION)(HTHEME, HDC, int, int, const RECT *, HRGN *);
typedef HRESULT (__stdcall *PFNWXUHITTESTTHEMEBACKGROUND)(HTHEME, HDC, int, int, DWORD, const RECT *, HRGN, POINT, unsigned short *);
typedef HRESULT (__stdcall *PFNWXUDRAWTHEMEEDGE)(HTHEME, HDC, int, int, const RECT *, unsigned int, unsigned int, RECT *);
typedef HRESULT (__stdcall *PFNWXUDRAWTHEMEICON)(HTHEME, HDC, int, int, const RECT *, HIMAGELIST, int);
typedef BOOL    (__stdcall *PFNWXUISTHEMEPARTDEFINED)(HTHEME, int, int);
typedef BOOL    (__stdcall *PFNWXUISTHEMEBACKGROUNDPARTIALLYTRANSPARENT)(HTHEME, int, int);
typedef HRESULT (__stdcall *PFNWXUGETTHEMECOLOR)(HTHEME, int, int, int, COLORREF*);
typedef HRESULT (__stdcall *PFNWXUGETTHEMEMETRIC)(HTHEME, HDC, int, int, int, int *);
typedef HRESULT (__stdcall *PFNWXUGETTHEMESTRING)(HTHEME, int, int, int, wchar_t *, int);
typedef HRESULT (__stdcall *PFNWXUGETTHEMEBOOL)(HTHEME, int, int, int, BOOL *);
typedef HRESULT (__stdcall *PFNWXUGETTHEMEINT)(HTHEME, int, int, int, int *);
typedef HRESULT (__stdcall *PFNWXUGETTHEMEENUMVALUE)(HTHEME, int, int, int, int *);
typedef HRESULT (__stdcall *PFNWXUGETTHEMEPOSITION)(HTHEME, int, int, int, POINT *);
typedef HRESULT (__stdcall *PFNWXUGETTHEMEFONT)(HTHEME, HDC, int, int, int, wxUxThemeFont::Ptr *);
typedef HRESULT (__stdcall *PFNWXUGETTHEMERECT)(HTHEME, int, int, int, RECT *);
typedef HRESULT (__stdcall *PFNWXUGETTHEMEMARGINS)(HTHEME, HDC, int, int, int, RECT *, MARGINS *);
typedef HRESULT (__stdcall *PFNWXUGETTHEMEINTLIST)(HTHEME, int, int, int, INTLIST*);
typedef HRESULT (__stdcall *PFNWXUGETTHEMEPROPERTYORIGIN)(HTHEME, int, int, int, /* enum */ PROPERTYORIGIN *);
typedef HRESULT (__stdcall *PFNWXUSETWINDOWTHEME)(HWND, const wchar_t*, const wchar_t *);
typedef HRESULT (__stdcall *PFNWXUGETTHEMEFILENAME)(HTHEME, int, int, int, wchar_t *, int);
typedef COLORREF(__stdcall *PFNWXUGETTHEMESYSCOLOR)(HTHEME, int);
typedef HBRUSH  (__stdcall *PFNWXUGETTHEMESYSCOLORBRUSH)(HTHEME, int);
typedef BOOL    (__stdcall *PFNWXUGETTHEMESYSBOOL)(HTHEME, int);
typedef int     (__stdcall *PFNWXUGETTHEMESYSSIZE)(HTHEME, int);
typedef HRESULT (__stdcall *PFNWXUGETTHEMESYSFONT)(HTHEME, int, wxUxThemeFont::Ptr *);
typedef HRESULT (__stdcall *PFNWXUGETTHEMESYSSTRING)(HTHEME, int, wchar_t *, int);
typedef HRESULT (__stdcall *PFNWXUGETTHEMESYSINT)(HTHEME, int, int *);
typedef BOOL    (__stdcall *PFNWXUISTHEMEACTIVE)();
typedef BOOL    (__stdcall *PFNWXUISAPPTHEMED)();
typedef HTHEME  (__stdcall *PFNWXUGETWINDOWTHEME)(HWND);
typedef HRESULT (__stdcall *PFNWXUENABLETHEMEDIALOGTEXTURE)(HWND, DWORD);
typedef BOOL    (__stdcall *PFNWXUISTHEMEDIALOGTEXTUREENABLED)(HWND);
typedef DWORD   (__stdcall *PFNWXUGETTHEMEAPPPROPERTIES)();
typedef void    (__stdcall *PFNWXUSETTHEMEAPPPROPERTIES)(DWORD);
typedef HRESULT (__stdcall *PFNWXUGETCURRENTTHEMENAME)(wchar_t *, int, wchar_t *, int, wchar_t *, int);
typedef HRESULT (__stdcall *PFNWXUGETTHEMEDOCUMENTATIONPROPERTY)(const wchar_t *, const wchar_t *, wchar_t *, int);
typedef HRESULT (__stdcall *PFNWXUDRAWTHEMEPARENTBACKGROUND)(HWND, HDC, RECT *);
typedef HRESULT (__stdcall *PFNWXUENABLETHEMING)(BOOL);

// ----------------------------------------------------------------------------
// wxUxThemeEngine: provides all theme functions from uxtheme.dll
// ----------------------------------------------------------------------------

// we always define this class, even if wxUSE_UXTHEME == 0, but we just make it
// empty in this case -- this allows to use it elsewhere without any #ifdefs
                 
                          

                                                     
     
                                                                       
      

class WXDLLIMPEXP_CORE wxUxThemeEngine
{
public:
    // get the theme engine or NULL if themes are not available
    static wxUxThemeEngine *Get();

    // get the theme enging or NULL if themes are not available or not used for
    // this application
    static wxUxThemeEngine *GetIfActive();

    // all uxtheme.dll functions
    PFNWXUOPENTHEMEDATA OpenThemeData(...) { return 0; }
    PFNWXUCLOSETHEMEDATA CloseThemeData(...) { return 0; }
    PFNWXUDRAWTHEMEBACKGROUND DrawThemeBackground(...) { return 0; }
    PFNWXUDRAWTHEMETEXT DrawThemeText(...) { return 0; }
    PFNWXUGETTHEMEBACKGROUNDCONTENTRECT GetThemeBackgroundContentRect(...) { return 0; }
    PFNWXUGETTHEMEBACKGROUNDEXTENT GetThemeBackgroundExtent(...) { return 0; }
    PFNWXUGETTHEMEPARTSIZE GetThemePartSize(...) { return 0; }
    PFNWXUGETTHEMETEXTEXTENT GetThemeTextExtent(...) { return 0; }
    PFNWXUGETTHEMETEXTMETRICS GetThemeTextMetrics(...) { return 0; }
    PFNWXUGETTHEMEBACKGROUNDREGION GetThemeBackgroundRegion(...) { return 0; }
    PFNWXUHITTESTTHEMEBACKGROUND HitTestThemeBackground(...) { return 0; }
    PFNWXUDRAWTHEMEEDGE DrawThemeEdge(...) { return 0; }
    PFNWXUDRAWTHEMEICON DrawThemeIcon(...) { return 0; }
    PFNWXUISTHEMEPARTDEFINED IsThemePartDefined(...) { return 0; }
    PFNWXUISTHEMEBACKGROUNDPARTIALLYTRANSPARENT IsThemeBackgroundPartiallyTransparent(...) { return 0; }
    PFNWXUGETTHEMECOLOR GetThemeColor(...) { return 0; }
    PFNWXUGETTHEMEMETRIC GetThemeMetric(...) { return 0; }
    PFNWXUGETTHEMESTRING GetThemeString(...) { return 0; }
    PFNWXUGETTHEMEBOOL GetThemeBool(...) { return 0; }
    PFNWXUGETTHEMEINT GetThemeInt(...) { return 0; }
    PFNWXUGETTHEMEENUMVALUE GetThemeEnumValue(...) { return 0; }
    PFNWXUGETTHEMEPOSITION GetThemePosition(...) { return 0; }
    PFNWXUGETTHEMEFONT GetThemeFont(...) { return 0; }
    PFNWXUGETTHEMERECT GetThemeRect(...) { return 0; }
    PFNWXUGETTHEMEMARGINS GetThemeMargins(...) { return 0; }
    PFNWXUGETTHEMEINTLIST GetThemeIntList(...) { return 0; }
    PFNWXUGETTHEMEPROPERTYORIGIN GetThemePropertyOrigin(...) { return 0; }
    PFNWXUSETWINDOWTHEME SetWindowTheme(...) { return 0; }
    PFNWXUGETTHEMEFILENAME GetThemeFilename(...) { return 0; }
    PFNWXUGETTHEMESYSCOLOR GetThemeSysColor(...) { return 0; }
    PFNWXUGETTHEMESYSCOLORBRUSH GetThemeSysColorBrush(...) { return 0; }
    PFNWXUGETTHEMESYSBOOL GetThemeSysBool(...) { return 0; }
    PFNWXUGETTHEMESYSSIZE GetThemeSysSize(...) { return 0; }
    PFNWXUGETTHEMESYSFONT GetThemeSysFont(...) { return 0; }
    PFNWXUGETTHEMESYSSTRING GetThemeSysString(...) { return 0; }
    PFNWXUGETTHEMESYSINT GetThemeSysInt(...) { return 0; }
    PFNWXUISTHEMEACTIVE IsThemeActive(...) { return 0; }
    PFNWXUISAPPTHEMED IsAppThemed(...) { return 0; }
    PFNWXUGETWINDOWTHEME GetWindowTheme(...) { return 0; }
    PFNWXUENABLETHEMEDIALOGTEXTURE EnableThemeDialogTexture(...) { return 0; }
    PFNWXUISTHEMEDIALOGTEXTUREENABLED IsThemeDialogTextureEnabled(...) { return 0; }
    PFNWXUGETTHEMEAPPPROPERTIES GetThemeAppProperties(...) { return 0; }
    PFNWXUSETTHEMEAPPPROPERTIES SetThemeAppProperties(...) { return 0; }
    PFNWXUGETCURRENTTHEMENAME GetCurrentThemeName(...) { return 0; }
    PFNWXUGETTHEMEDOCUMENTATIONPROPERTY GetThemeDocumentationProperty(...) { return 0; }
    PFNWXUDRAWTHEMEPARENTBACKGROUND DrawThemeParentBackground(...) { return 0; }
    PFNWXUENABLETHEMING EnableTheming(...) { return 0; }

private:
    // construcor is private as only Get() can create us and is also trivial as
    // everything really happens in Initialize()
    wxUxThemeEngine() { }

    // destructor is private as only Get() and wxUxThemeModule delete us, it is
    // not virtual as we're not supposed to be derived from
    ~wxUxThemeEngine() { }

                 
                                                                       
      
                                                                       
                      


                  
                                  


                                                    
                                           

                                                                        
                                         

                                   
                                 
       // wxUSE_UXTHEME

    wxDECLARE_NO_COPY_CLASS(wxUxThemeEngine);
};

                 

                                                                   
 
                                    
                                                                     
                        
                       
 

      // !wxUSE_UXTHEME

/* static */ inline wxUxThemeEngine *wxUxThemeEngine::Get()
{
    return NULL;
}

/* static */ inline wxUxThemeEngine *wxUxThemeEngine::GetIfActive()
{
    return NULL;
}

       // wxUSE_UXTHEME/!wxUSE_UXTHEME

// ----------------------------------------------------------------------------
// wxUxThemeHandle: encapsulates ::Open/CloseThemeData()
// ----------------------------------------------------------------------------

class wxUxThemeHandle
{
public:
    wxUxThemeHandle(const wxWindow *win, const wchar_t *classes)
    {
        wxUxThemeEngine *engine = wxUxThemeEngine::Get();

        m_hTheme = engine ? (HTHEME)engine->OpenThemeData(GetHwndOf(win), classes)
                          : NULL;
    }

    operator HTHEME() const { return m_hTheme; }

    ~wxUxThemeHandle()
    {
        if ( m_hTheme )
        {
            wxUxThemeEngine::Get()->CloseThemeData(m_hTheme);
        }
    }

private:
    HTHEME m_hTheme;

    wxDECLARE_NO_COPY_CLASS(wxUxThemeHandle);
};

       // _WX_UXTHEME_H_

