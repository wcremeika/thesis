
#__FILE__ _"C:\Users\Billy\Dropbox\Thesis\Projects\filezilla-3.7.3\src\include\wx\platform.h" 0
/**
* Name:        wx/platform.h
* Purpose:     define the OS and compiler identification macros
* Author:      Vadim Zeitlin
* Modified by:
* Created:     29.10.01 (extracted from wx/defs.h)
* Copyright:   (c) 1997-2001 Vadim Zeitlin
* Licence:     wxWindows licence
*/

/* THIS IS A C FILE, DON'T USE C++ FEATURES (IN PARTICULAR COMMENTS) IN IT */

                       
                       

                      
                   
                               
                               
                             
                                  
      
                             
                                  
      
                             
                                  
      
                             
                                  
      
                             
                                  
      
                                
                 
                   
      
                 
                   
      
      

/*
    We use __WINDOWS__ as our main identification symbol for Microsoft Windows
    but it's actually not predefined directly by any commonly used compilers
    (only Watcom defines it itself and it's not supported any longer), so we
    define it ourselves if any of the following macros is defined:

    - MSVC _WIN32 (notice that this is also defined under Win64)
    - Borland __WIN32__
    - Our __WXMSW__ which selects Windows as platform automatically
 */
                                                               
                   
                   
                         
       /* Any standard symbol indicating Windows */

                   
              
          
                                                                            
                                                                           
                                                                             
           
              
                    

                 
                 
                       
       /* _WIN64 */

                        
                                                                   
                                                                                              
                 
      

                         
                   
      

              
              
      

             
             
      

                 
                 
      
       /* __WINDOWS__ */

/*
    Don't use widget toolkit specific code in non-GUI code in the library
    itself to ensure that the same base library is used for both MSW and GTK
    ports. But keep __WXMSW__ defined for (console) applications using
    wxWidgets for compatibility.
 */
                                                           
                
                
      
                
                
      
      

                                              

                
                
      

       /* __WXGTK__ && __WINDOWS__ */

/* detect MS SmartPhone */
                                  
                      
                      
      
                   
                   
      
      

/* detect PocketPC */
                                  
                    
                    
      
                   
                   
      
      

/* detect Standard WinCE SDK */
                                       
                             
                             
      
                   
                   
      
      

                                                                                         
                       
                     
                     
      
                         
                      
                      
      
      
                   
                   
      
      

                                                                   
                    
      

                                                                          
                      
      

                  
                     
                                      
      

                       

/*
   Include wx/setup.h for the Unix platform defines generated by configure and
   the library compilation options

   Note that it must be included before defining hardware symbols below as they
   could be already defined by configure but it must be included after defining
   the compiler macros above as msvc/wx/setup.h relies on them under Windows.
 */
                    

/*
   Convenience for any optional classes that use the wxAnyButton base class.
 */
                                   
                            
      


/*
   Hardware platform detection.

   VC++ defines _M_xxx symbols.
 */
                                                                             
                     
                         
          
       /* x86 */

                    
                    
                        
          
       /* ia64 */

                                                            
                       
                           
          
       /* alpha */

                                         
                     
                         
          
       /* alpha */


/*
   adjust the Unicode setting: wxUSE_UNICODE should be defined as 0 or 1
   and is used by wxWidgets, _UNICODE and/or UNICODE may be defined or used by
   the system headers so bring these settings in sync
 */

/* set wxUSE_UNICODE to 1 if UNICODE or _UNICODE is defined */
                                         
                    
                       
      /* !UNICODE */
                     
                       
      
       /* UNICODE/!UNICODE */

/* and vice versa: define UNICODE and _UNICODE if wxUSE_UNICODE is 1 */
                 
                
                
      
               
               
      
       /* wxUSE_UNICODE */


/*
   test for old versions of Borland C, normally need at least 5.82, Turbo
   explorer, available for free at http://www.turboexplorer.com/downloads
*/


/*
    Older versions of Borland C have some compiler bugs that need
    workarounds. Mostly pertains to the free command line compiler 5.5.1.
*/
                                                    
      
                                                                     
                                                                      
                                                                       
                                                             
      
                                      

      
                                                                         
                                    
       
                                  

      
                                                                   
                                                                         
                                                                   
                                                            

                                                                      
                        
      
                                     
       /* __BORLANDC__ */

/*
   OS: first of all, test for MS-DOS platform. We must do this before testing
       for Unix, because DJGPP compiler defines __unix__ under MS-DOS
 */
                                                               
               
               
      
                                                                    
                                                              
                                                             
                  
                        
      
                
                         
      
      

  
                                                                           
                                    
                                                                  
   
                                                                                                                                                                                                                                                                                                          




                     

                                           
              
               
                      
                
              
                                                                                
                                                                        
               
                  
                     

                                                                               
                             
                             
      
                 

              
                         
      
                             
                                                      
                   
      

                                                                  
                                         
                
                  

                                            
                              
                        
      
      

                                                                      
                                                                          
                                                   
       
                                           
                
                  
      
               
                 
      
                                                                       
                  
                    
      
                                                                           
                     
                       
      
                                                                           
                                                             
                         
      
      

  
           
   
                      

                                                   
                                                                       
                
                
      
      

                       
                                 
      

                                                            
                          
                                                                   
                            
      
                        

  
              
   
                          

                                  
                 
      
      

                                                                               
                                                              
                                                                                    
                        
      
     
      
        /* OS */

/*
   if we're on a Unix system but didn't use configure (so that setup.h didn't
   define __UNIX__), do define __UNIX__ now
 */
                                                
                
       /* Unix */

                                              
             
      

/*
   We get "Large Files (ILP32) not supported in strict ANSI mode." #error
   from HP-UX standard headers when compiling with g++ without this:
 */
                                               
                      
      

/* Force linking against required libraries under Windows: */
                  
                                   
                         
                             
      

                                                                
                      
      

                                                                                                                                                                                                                                                                    






                           
     
                             
                                            
      


/*
    Handle Darwin gcc universal compilation.  Don't do this in an Apple-
    specific case since no sane compiler should be defining either
    __BIG_ENDIAN__ or __LITTLE_ENDIAN__ unless it really is generating
    code that will be hosted on a machine with the appropriate endianness.
    If a compiler defines neither, assume the user or configure set
    WORDS_BIGENDIAN appropriately.
 */
                           
                      
                         
                                
                      
                                                     
                                                                            
                                                         
      
/* also the 32/64 bit universal builds must be handled accordingly */
                 
               
                    
                  
                    
                       
                     
                       
     
                    
                  
                    
                       
                     
                       
      
      

/*
    Define various OS X symbols before including wx/chkconf.h which uses them.

    __WXOSX_MAC__ means Mac OS X, non embedded
    __WXOSX_IPHONE__ means OS X iPhone
 */

/*
    Normally all of __WXOSX_XXX__, __WXOSX__ and __WXMAC__ are defined by
    configure but ensure that we also define them if configure was not used for
    whatever reason.

    The primary symbol remains __WXOSX_XXX__ one, __WXOSX__ exists to allow
    checking for any OS X port (Carbon and Cocoa) and __WXMAC__ is an old name
    for it.
 */
                                                                                      
                 
                   
      
                 
                   
      
      

                
                                                 
                               
                             
                                                      
      
      
     
                                                                         
      
      
                                                
      
      
                       
      
      

                    
                     
                               
                             
                                  
      
                             
                                  
      
                             
                                  
      
                             
                                  
      
                             
                                  
      
     
      
      
      

/*
    __WXOSX_OR_COCOA__ is a common define to wxOSX (Carbon or Cocoa) and wxCocoa ports under OS X.

    DO NOT use this define in base library code.  Although wxMac has its own
    private base library (and thus __WXOSX_OR_COCOA__,__WXMAC__ and related defines are
    valid there), wxCocoa shares its library with other ports like wxGTK and wxX11.

    To keep wx authors from screwing this up, only enable __WXOSX_OR_COCOA__ for wxCocoa when
    not compiling the base library.  We determine this by first checking if
    wxUSE_BASE is not defined.  If it is not defined, then we're not buildling
    the base library, and possibly not building wx at all (but actually building
    user code that's using wx). If it is defined then we must check to make sure
    it is not true.  If it is true, we're building base.

    If you want it in the common darwin base library then use __DARWIN__.  You
    can use any Darwin-available libraries like CoreFoundation but please avoid
    using OS X libraries like Carbon or CoreServices.

 */
                                                                                         
                            
      

/*
   check the consistency of the settings in setup.h: note that this must be
   done after setting wxUSE_UNICODE correctly as it is used in wx/chkconf.h
   and after defining the compiler macros which are used in it too
 */
                      


/*
   some compilers don't support iostream.h any longer, while some of theme
   are not updated with <iostream> yet, so override the users setting here
   in such case.
 */
                                           
                      
                         
                                              
                      
                         
                          
                      
                         
       /* compilers with/without iostream.h */

/*
   old C++ headers (like <iostream.h>) declare classes in the global namespace
   while the new, standard ones (like <iostream>) do it in std:: namespace,
   unless it's an old gcc version.

   using this macro allows constuctions like "wxSTD iostream" to work in
   either case
 */
                                                                                                           
                   
     
             
      

/* On OpenVMS with the most recent HP C++ compiler some function (i.e. wscanf)
 * are only available in the std-namespace. (BUG???)
 */
                                                                                                              
                           
     
                     
      

            
                           
                  
                         
                         
                         
      
      

/* Choose which method we will use for updating menus
 * - in OnIdle, or when we receive a wxEVT_MENU_OPEN event.
 * Presently, only Windows, OS X and GTK+ support wxEVT_MENU_OPEN.
 */
                             
                                                                                                 
                               
     
                               
      
      

/*
 * Define symbols that are not yet in
 * configure or possibly some setup.h files.
 * They will need to be added.
 */

                        
                                  
                          
     
                          
      
      

                    
                      
      

                                               
                     
      

/*
    Optionally supported C++ features.
 */

/*
    RTTI: if it is disabled in build/msw/makefile.* then this symbol will
    already be defined but it's also possible to do it from configure (with
    g++) or by editing project files with MSVC so test for it here too.
 */
                 
    /*
        Only 4.3 defines __GXX_RTTI by default so its absence is not an
        indication of disabled RTTI with the previous versions.
     */
                             
                  
                 
      
                       
                
                 
      
      
       /* wxNO_RTTI */

       /* _WX_PLATFORM_H_ */
