
#__FILE__ _"C:\Users\Billy\Dropbox\Thesis\Projects\filezilla-3.7.3\src\include\wx\process.h" 0
/////////////////////////////////////////////////////////////////////////////
// Name:        wx/process.h
// Purpose:     wxProcess class
// Author:      Guilhem Lavaux
// Modified by: Vadim Zeitlin to check error codes, added Detach() method
// Created:     24/06/98
// Copyright:   (c) 1998 Guilhem Lavaux
// Licence:     wxWindows licence
/////////////////////////////////////////////////////////////////////////////

                      
                      

                    

                 
                          
      

                           // for wxSignal

// the wxProcess creation flags
enum
{
    // no redirection
    wxPROCESS_DEFAULT = 0,

    // redirect the IO of the child process
    wxPROCESS_REDIRECT = 1
};

// ----------------------------------------------------------------------------
// A wxProcess object should be passed to wxExecute - than its OnTerminate()
// function will be called when the process terminates.
// ----------------------------------------------------------------------------

class WXDLLIMPEXP_BASE wxProcess : public wxEvtHandler
{
public:
    // kill the process with the given PID
    static wxKillError Kill(int pid, wxSignal sig = wxSIGTERM, int flags = wxKILL_NOCHILDREN);

    // test if the given process exists
    static bool Exists(int pid);

    // this function replaces the standard popen() one: it launches a process
    // asynchronously and allows the caller to get the streams connected to its
    // std{in|out|err}
    //
    // on error NULL is returned, in any case the process object will be
    // deleted automatically when the process terminates and should *not* be
    // deleted by the caller
    static wxProcess *Open(const wxString& cmd, int flags = wxEXEC_ASYNC);


    // ctors
    wxProcess(wxEvtHandler *parent = NULL, int nId = wxID_ANY)
        { Init(parent, nId, wxPROCESS_DEFAULT); }

    wxProcess(int flags) { Init(NULL, wxID_ANY, flags); }

    virtual ~wxProcess();

    // get the process ID of the process executed by Open()
    long GetPid() const { return m_pid; }

    // may be overridden to be notified about process termination
    virtual void OnTerminate(int pid, int status);

    // call this before passing the object to wxExecute() to redirect the
    // launched process stdin/stdout, then use GetInputStream() and
    // GetOutputStream() to get access to them
    void Redirect() { m_redirect = true; }
    bool IsRedirected() const { return m_redirect; }

    // detach from the parent - should be called by the parent if it's deleted
    // before the process it started terminates
    void Detach();

                 
                    
                                                                   
                                                                   
                                                                      

                                                                           
                                                                        

                                                            
                               

                                                                            
                                  
                                  

                                          
      
                                                                         
                                                                            
                                              
                                                 
                                                 
                                                  
       // wxUSE_STREAMS

    // priority
        // Sets the priority to the given value: see wxPRIORITY_XXX constants.
        //
        // NB: the priority can only be set before the process is created
    void SetPriority(unsigned priority);

        // Get the current priority.
    unsigned GetPriority() const { return m_priority; }

    // implementation only - don't use!
    // --------------------------------

    // needs to be public since it needs to be used from wxExecute() global func
    void SetPid(long pid) { m_pid = pid; }

protected:
    void Init(wxEvtHandler *parent, int id, int flags);

    int m_id;
    long m_pid;

    unsigned m_priority;

                 
                                                                           
                                                                             
                                            
                                  
                                  
                                   
       // wxUSE_STREAMS

    bool m_redirect;

    DECLARE_DYNAMIC_CLASS(wxProcess)
    wxDECLARE_NO_COPY_CLASS(wxProcess);
};

// ----------------------------------------------------------------------------
// wxProcess events
// ----------------------------------------------------------------------------

class WXDLLIMPEXP_FWD_BASE wxProcessEvent;

wxDECLARE_EXPORTED_EVENT( WXDLLIMPEXP_BASE, wxEVT_END_PROCESS, wxProcessEvent );

class WXDLLIMPEXP_BASE wxProcessEvent : public wxEvent
{
public:
    wxProcessEvent(int nId = 0, int pid = 0, int exitcode = 0) : wxEvent(nId)
    {
        m_eventType = wxEVT_END_PROCESS;
        m_pid = pid;
        m_exitcode = exitcode;
    }

    // accessors
        // PID of process which terminated
    int GetPid() { return m_pid; }

        // the exit code
    int GetExitCode() { return m_exitcode; }

    // implement the base class pure virtual
    virtual wxEvent *Clone() const { return new wxProcessEvent(*this); }

public:
    int m_pid,
        m_exitcode;

    DECLARE_DYNAMIC_CLASS_NO_ASSIGN(wxProcessEvent)
};

typedef void (wxEvtHandler::*wxProcessEventFunction)(wxProcessEvent&);

                                                                                          


                                                                                                         


       // _WX_PROCESSH__
