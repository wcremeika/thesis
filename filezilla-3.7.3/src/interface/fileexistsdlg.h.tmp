
#__FILE__ _"C:\Users\Billy\Dropbox\Thesis\Projects\filezilla-3.7.3\src\interface\fileexistsdlg.h" 0
                           
                           

                    
#__FILE__ _"C:\Users\Billy\Dropbox\Thesis\Projects\filezilla-3.7.3\src\interface\dialogex.h" 0
                      
                      

                      
#__FILE__ _"C:\Users\Billy\Dropbox\Thesis\Projects\filezilla-3.7.3\src\interface\wrapengine.h" 0
                        
                        

class CWrapEngine
{
public:
	CWrapEngine();
	virtual ~CWrapEngine();

	bool LoadCache();

	static void ClearCache();

	enum wrap_result {
		wrap_failed = 0x01,
		wrap_didwrap = 0x02
	};
	// Find all wxStaticText controls in the given window(s) and wrap them, so
	// that the window has the right aspect ratio...
	bool WrapRecursive(wxWindow* wnd, double ratio, const char* name = "", wxSize canvas = wxSize(), wxSize minRequested = wxSize());
	bool WrapRecursive(std::vector<wxWindow*>& windows, double ratio, const char* name = "", wxSize canvas = wxSize(), wxSize minRequested = wxSize());

	// .. or does not exceed the given maximum length.
	int WrapRecursive(wxWindow* wnd, wxSizer* sizer, int max);

	// Find all wxStaticText controls in the window and unwrap them
	bool UnwrapRecursive(wxWindow* wnd, wxSizer* sizer);

	// Wrap the given text so its length in pixels does not exceed maxLength
	bool WrapText(wxWindow* parent, wxString &text, unsigned long maxLength);
	bool WrapTextChinese(wxWindow* parent, wxString &text, unsigned long maxLength);
	bool WrapText(wxWindow* parent, int id, unsigned long maxLength);
	wxString UnwrapText(const wxString& text);

	int GetWidthFromCache(const char* name);

	void CheckLanguage();

protected:
	void UnwrapRecursive_Wrapped(const std::list<int> &wrapped, std::vector<wxWindow*> &windows, bool remove_fitting = false);

	void SetWidthToCache(const char* name, int width);

	std::map<wxChar, unsigned int> m_charWidths;

	bool CanWrapBefore(const wxChar& c);
	bool m_wrapOnEveryChar;
	const wxChar* m_noWrapChars;

	wxFont m_font;

	static bool m_use_cache;
};

       //__WRAPENGINE_H__

#__FILE__ _"C:\Users\Billy\Dropbox\Thesis\Projects\filezilla-3.7.3\src\interface\dialogex.h" 6

class wxDialogEx : public wxDialog, public CWrapEngine
{
public:
	bool Load(wxWindow *pParent, const wxString& name);

	bool SetLabel(int id, const wxString& label, unsigned long maxLength = 0);
	wxString GetLabel(int id);

	virtual int ShowModal();

	bool ReplaceControl(wxWindow* old, wxWindow* wnd);

	static int ShownDialogs() { return m_shown_dialogs; }

protected:

	DECLARE_EVENT_TABLE()
	virtual void OnChar(wxKeyEvent& event);

	static int m_shown_dialogs;
};

       //__DIALOGEX_H__

#__FILE__ _"C:\Users\Billy\Dropbox\Thesis\Projects\filezilla-3.7.3\src\interface\fileexistsdlg.h" 4

class CFileExistsDlg: public wxDialogEx
{
	DECLARE_EVENT_TABLE()

public:
	/// Constructors
	CFileExistsDlg(CFileExistsNotification *pNotification);

	/// Creation
	bool Create(wxWindow* parent);

	/// Creates the controls and sizers
	void CreateControls();

	enum CFileExistsNotification::OverwriteAction GetAction() const;
	bool Always(bool &directionOnly, bool &queueOnly) const;

protected:
	void OnOK(wxCommandEvent& event);
	void OnCancel(wxCommandEvent& event);
	void OnCheck(wxCommandEvent& event);

	void LoadIcon(int id, const wxString &file);
	wxString GetPathEllipsis(wxString path, wxWindow *window);

	CFileExistsNotification *m_pNotification;
	wxRadioButton *m_pAction1, *m_pAction2, *m_pAction3, *m_pAction4, *m_pAction5, *m_pAction6, *m_pAction7;
	enum CFileExistsNotification::OverwriteAction m_action;
	bool m_always;
	bool m_directionOnly;
	bool m_queueOnly;
};

       //__FILEEXISTSDLG_H__
