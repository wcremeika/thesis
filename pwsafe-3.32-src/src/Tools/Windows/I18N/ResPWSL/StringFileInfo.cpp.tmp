
#__FILE__ _"C:\Users\Billy\Dropbox\Thesis\Projects\pwsafe-3.32-src\src\Tools\Windows\I18N\ResPWSL\StringFileInfo.cpp" 0
//
// This code was written by Denis Zabavchik as at 29 November 2006.
// It is unmodified except for possibly formatting.
// His article on "Modification of Version Information Resources in compiled binaries"
// can be found at: http://www.codeproject.com/library/VerInfoLib.asp
//

// StringFileInfo.cpp: implementation of the CStringFileInfo class.
//
//////////////////////////////////////////////////////////////////////

                  
#__FILE__ _"C:\Users\Billy\Dropbox\Thesis\Projects\pwsafe-3.32-src\src\Tools\Windows\I18N\ResPWSL\stdafx.h" 0
// stdafx.h : include file for standard system include files,
//  or project specific include files that are used frequently, but
//      are changed infrequently
//

       

                                                                             

                           // MFC core and standard components
                           // MFC extensions

                  

#__FILE__ _"C:\Users\Billy\Dropbox\Thesis\Projects\pwsafe-3.32-src\src\Tools\Windows\I18N\ResPWSL\StringFileInfo.cpp" 12
                          
#__FILE__ _"C:\Users\Billy\Dropbox\Thesis\Projects\pwsafe-3.32-src\src\Tools\Windows\I18N\ResPWSL\StringFileInfo.h" 0
//
// This code was written by Denis Zabavchik as at 29 November 2006.
// It is unmodified except for possibly formatting.
// His article on "Modification of Version Information Resources in compiled binaries"
// can be found at: http://www.codeproject.com/library/VerInfoLib.asp
//

// StringFileInfo.h: interface for the CStringFileInfo class.
//
//////////////////////////////////////////////////////////////////////

       

                                       
#__FILE__ _"C:\Users\Billy\Dropbox\Thesis\Projects\pwsafe-3.32-src\src\Tools\Windows\I18N\ResPWSL\VersionInfoHelperStructures.h" 0
//
// This code was written by Denis Zabavchik as at 29 November 2006.
// It is unmodified except for possibly formatting.
// His article on "Modification of Version Information Resources in compiled binaries"
// can be found at: http://www.codeproject.com/library/VerInfoLib.asp
//

// ******************************************************************
//  VersionInfoHelperStructures   version:  1.0   ·  date: 03/06/2006
//  -----------------------------------------------------------------
//  -----------------------------------------------------------------

//////////////////////////////////////////////////////////////////////////
// Helper structures
// All Version structures are essentially the same, and are declared to
// increase code readability
//

       

                                                    

struct BaseVersionStruct {
  WORD        wLength; 
  WORD        wValueLength; 
  WORD        wType; 
  WCHAR       szKey[1]; 
  WORD        Padding[1]; 
};

struct VERSION_INFO_HEADER: public BaseVersionStruct{ 
  VS_FIXEDFILEINFO Value; 
};

struct String: public BaseVersionStruct{ 
  WORD   Value[1]; 
}; 

struct StringTable: public BaseVersionStruct { 
  String Children[1]; 
};

struct Var: public BaseVersionStruct { 
  DWORD Value[1]; 
}; 


struct BaseFileInfo: public BaseVersionStruct 
{ 
};

struct StringFileInfo: public BaseFileInfo { 
  StringTable Children[1]; 
};

struct VarFileInfo: public BaseFileInfo  { 
  Var   Children[1]; 
}; 

#__FILE__ _"C:\Users\Billy\Dropbox\Thesis\Projects\pwsafe-3.32-src\src\Tools\Windows\I18N\ResPWSL\StringFileInfo.h" 21

class CVersionInfoBuffer;
class CStringTable;

class CStringFileInfo: public CObject
{
public:
  void Reset();
  CStringFileInfo();
  CStringFileInfo(StringFileInfo* pStringFI);
  virtual ~CStringFileInfo();

  void FromStringFileInfo(StringFileInfo* pStringFI);
  void Write(CVersionInfoBuffer & viBuf);

  BOOL IsEmpty();

  // Table count
  DWORD GetStringTableCount();

  // Iterative Access to StringTables
  POSITION GetFirstStringTablePosition() const;

  const CStringTable* GetNextStringTable(POSITION &pos) const;
  CStringTable* GetNextStringTable(POSITION &pos);

  // Convenient references to first usually the only string table
  const CStringTable& GetFirstStringTable() const;
  CStringTable& GetFirstStringTable();

  // Access string tables by keys (language ID + Code Page)
  const CStringTable& GetStringTable(const CString& strKey) const;
  CStringTable& GetStringTable(const CString& strKey);

  // Bracket operators allowing easy access to string tables
  const CStringTable& operator [] (const CString &strKey) const;
  CStringTable &operator [] (const CString &strKey);

  // Checks if string table for specified key allready defined
  BOOL HasStringTable(const CString &strKey) const;

  // Add new String table
  CStringTable& AddStringTable(const CString &strKey);
  CStringTable& AddStringTable(CStringTable* pStringTable);

  // Change language of the string table (the proper way, do not use
  // CStringTable::SetKey() directly)
  BOOL SetStringTableKey(const CString &strOldKey, const CString &strNewKey);

private:
  CObList m_lstStringTables;
  CMapStringToOb m_mapStringTables;
};

#__FILE__ _"C:\Users\Billy\Dropbox\Thesis\Projects\pwsafe-3.32-src\src\Tools\Windows\I18N\ResPWSL\StringFileInfo.cpp" 13
                       
#__FILE__ _"C:\Users\Billy\Dropbox\Thesis\Projects\pwsafe-3.32-src\src\Tools\Windows\I18N\ResPWSL\StringTable.h" 0
//
// This code was written by Denis Zabavchik as at 29 November 2006.
// It is unmodified except for possibly formatting.
// His article on "Modification of Version Information Resources in compiled binaries"
// can be found at: http://www.codeproject.com/library/VerInfoLib.asp
//

// StringTable.h: interface for the CStringTable class.
//
//////////////////////////////////////////////////////////////////////

       

                             
#__FILE__ _"C:\Users\Billy\Dropbox\Thesis\Projects\pwsafe-3.32-src\src\Tools\Windows\I18N\ResPWSL\VersionInfoString.h" 0
//
// This code was written by Denis Zabavchik as at 29 November 2006.
// It is unmodified except for possibly formatting.
// His article on "Modification of Version Information Resources in compiled binaries"
// can be found at: http://www.codeproject.com/library/VerInfoLib.asp
//

// VersionInfoString.h: interface for the CVersionInfoString class.
//
//////////////////////////////////////////////////////////////////////

       

                                       
#__FILE__ _"C:\Users\Billy\Dropbox\Thesis\Projects\pwsafe-3.32-src\src\Tools\Windows\I18N\ResPWSL\VersionInfoHelperStructures.h" 0
//
// This code was written by Denis Zabavchik as at 29 November 2006.
// It is unmodified except for possibly formatting.
// His article on "Modification of Version Information Resources in compiled binaries"
// can be found at: http://www.codeproject.com/library/VerInfoLib.asp
//

// ******************************************************************
//  VersionInfoHelperStructures   version:  1.0   ·  date: 03/06/2006
//  -----------------------------------------------------------------
//  -----------------------------------------------------------------

//////////////////////////////////////////////////////////////////////////
// Helper structures
// All Version structures are essentially the same, and are declared to
// increase code readability
//

       

                                                    

struct BaseVersionStruct {
  WORD        wLength; 
  WORD        wValueLength; 
  WORD        wType; 
  WCHAR       szKey[1]; 
  WORD        Padding[1]; 
};

struct VERSION_INFO_HEADER: public BaseVersionStruct{ 
  VS_FIXEDFILEINFO Value; 
};

struct String: public BaseVersionStruct{ 
  WORD   Value[1]; 
}; 

struct StringTable: public BaseVersionStruct { 
  String Children[1]; 
};

struct Var: public BaseVersionStruct { 
  DWORD Value[1]; 
}; 


struct BaseFileInfo: public BaseVersionStruct 
{ 
};

struct StringFileInfo: public BaseFileInfo { 
  StringTable Children[1]; 
};

struct VarFileInfo: public BaseFileInfo  { 
  Var   Children[1]; 
}; 

#__FILE__ _"C:\Users\Billy\Dropbox\Thesis\Projects\pwsafe-3.32-src\src\Tools\Windows\I18N\ResPWSL\VersionInfoString.h" 21

class CVersionInfoBuffer;

class CVersionInfoString: public CObject
{
public:
  CVersionInfoString(String* pString);
  CVersionInfoString(const CString& strKey, const CString& strValue = "");

  const CString& GetKey() const;
  const CString& GetValue() const;

  CString& GetValue();

  void FromString(String* pString);
  void Write(CVersionInfoBuffer & viBuf);
private:
  CString m_strKey;
  CString m_strValue;
};

#__FILE__ _"C:\Users\Billy\Dropbox\Thesis\Projects\pwsafe-3.32-src\src\Tools\Windows\I18N\ResPWSL\StringTable.h" 21

                                       
#__FILE__ _"C:\Users\Billy\Dropbox\Thesis\Projects\pwsafe-3.32-src\src\Tools\Windows\I18N\ResPWSL\VersionInfoHelperStructures.h" 0
//
// This code was written by Denis Zabavchik as at 29 November 2006.
// It is unmodified except for possibly formatting.
// His article on "Modification of Version Information Resources in compiled binaries"
// can be found at: http://www.codeproject.com/library/VerInfoLib.asp
//

// ******************************************************************
//  VersionInfoHelperStructures   version:  1.0   ·  date: 03/06/2006
//  -----------------------------------------------------------------
//  -----------------------------------------------------------------

//////////////////////////////////////////////////////////////////////////
// Helper structures
// All Version structures are essentially the same, and are declared to
// increase code readability
//

       

                                                    

struct BaseVersionStruct {
  WORD        wLength; 
  WORD        wValueLength; 
  WORD        wType; 
  WCHAR       szKey[1]; 
  WORD        Padding[1]; 
};

struct VERSION_INFO_HEADER: public BaseVersionStruct{ 
  VS_FIXEDFILEINFO Value; 
};

struct String: public BaseVersionStruct{ 
  WORD   Value[1]; 
}; 

struct StringTable: public BaseVersionStruct { 
  String Children[1]; 
};

struct Var: public BaseVersionStruct { 
  DWORD Value[1]; 
}; 


struct BaseFileInfo: public BaseVersionStruct 
{ 
};

struct StringFileInfo: public BaseFileInfo { 
  StringTable Children[1]; 
};

struct VarFileInfo: public BaseFileInfo  { 
  Var   Children[1]; 
}; 

#__FILE__ _"C:\Users\Billy\Dropbox\Thesis\Projects\pwsafe-3.32-src\src\Tools\Windows\I18N\ResPWSL\StringTable.h" 23

class CStringTable: public CObject
{
public:
  //Construction
  CStringTable(const CString& strKey);
  CStringTable(WORD wLang, WORD wCodePageC);
  CStringTable(StringTable* pStringTable);
  virtual ~CStringTable();

  // Returns table key (language ID/codepage)
  const CString& GetKey() const;
  
  // Loads string table from resource structure in memory
  void FromStringTable(StringTable* pStringTable);
  
  // Saves string table to version info buffer
  void Write(CVersionInfoBuffer & viBuf);

  // Overloaded bracket operators used to access strings in the table
  const CString operator [] (const CString &strName) const;
  CString &operator [] (const CString &strName);

  // Iterative access to string objects in table
  POSITION GetFirstStringPosition() const;
  const CVersionInfoString* GetNextString(POSITION &pos) const;
  CVersionInfoString* GetNextString(POSITION &pos);

  // Retrieves the list of string names into a CStringList
  void GetStringNames(CStringList &slNames, BOOL bMerge = FALSE) const;

  friend class CStringFileInfo;
private:
  //Set key renames/changes the language/codepage for the table, accessible
  // only via CStringFileInfo::SetStringTableKey()
  void SetKey(const CString& strKey);

  CObList m_lstStrings;
  CMapStringToOb m_mapStrings;
  CString m_strKey;
};


#__FILE__ _"C:\Users\Billy\Dropbox\Thesis\Projects\pwsafe-3.32-src\src\Tools\Windows\I18N\ResPWSL\StringFileInfo.cpp" 14
                             
#__FILE__ _"C:\Users\Billy\Dropbox\Thesis\Projects\pwsafe-3.32-src\src\Tools\Windows\I18N\ResPWSL\VersionInfoBuffer.h" 0
//
// This code was written by Denis Zabavchik as at 29 November 2006.
// It is unmodified except for possibly formatting.
// His article on "Modification of Version Information Resources in compiled binaries"
// can be found at: http://www.codeproject.com/library/VerInfoLib.asp
//

// VersionInfoBuffer.h: interface for the CVersionInfoBuffer class.
//
//////////////////////////////////////////////////////////////////////

       

// Helper class for VersionInfo (auto reallocation of buffer, and helpful functions like Pad, PadToDWORD, WriteStructSize
class CVersionInfoBuffer : public CObject  
{
public:

  CVersionInfoBuffer();
  virtual ~CVersionInfoBuffer();

  // Writes data to the buffer
  void Write(LPVOID lpData, DWORD dwSize);

  // Writes string to the buffer (converts to Unicode)
  WORD WriteString(const CString& strValue);

  // Writes a WORD to the buffer
  void WriteWord(WORD wData);

  // Writes the difference between specified offset and current length to a WORD at given offset
  // this writing the structure size wLength
  void WriteStructSize(DWORD dwOffsetOfSizeMemember);

  // Returns current position
  DWORD GetPosition();

  // Allings to DWORD (pads with 0s)
  DWORD PadToDWORD();

  // Pads with zeroes 
  DWORD Pad(WORD wLength);

  // Get pointer to data (pointer can not be used after any writes made after calling GetData() due to possible relocation)
  const LPBYTE GetData();
private:
  DWORD m_dwPosition;
  DWORD m_dwBufSize;
  LPBYTE m_lpData;
protected:
  void ReallocBuffer(DWORD dwMinimumSize);
};

#__FILE__ _"C:\Users\Billy\Dropbox\Thesis\Projects\pwsafe-3.32-src\src\Tools\Windows\I18N\ResPWSL\StringFileInfo.cpp" 15

             
                
                                 
                     
      

//////////////////////////////////////////////////////////////////////
// Construction/Destruction

CStringFileInfo::CStringFileInfo()
{
}

CStringFileInfo::CStringFileInfo(StringFileInfo* pStringFI)
{
  FromStringFileInfo(pStringFI);
}

CStringFileInfo::~CStringFileInfo()
{
  Reset();
}

//////////////////////////////////////////////////////////////////////
// Loading/saving

void CStringFileInfo::FromStringFileInfo(StringFileInfo* pStringFI)
{
  ;

  StringTable* pStringTable = (StringTable*) (((DWORD)(LPBYTE) &pStringFI->szKey[wcslen(pStringFI->szKey)+1] + 3) & ~3);
  while ((DWORD)pStringTable < ((DWORD) pStringFI + pStringFI->wLength)) {
    CStringTable* pObStringTable = new CStringTable(pStringTable);
    AddStringTable(pObStringTable);

    pStringTable = (StringTable*) (((DWORD)(LPBYTE) (DWORD)pStringTable + pStringTable->wLength + 3) & ~3);

  }
}

void CStringFileInfo::Write(CVersionInfoBuffer & viBuf)
{
  //Check string tables
  if (m_lstStringTables.IsEmpty())
    return;

  //Pad to DWORD and save position for wLength
  DWORD pos = viBuf.PadToDWORD();

  //Skip size for now;
  viBuf.Pad(sizeof WORD);

  //Write wValueLength
  viBuf.WriteWord(0);

  //Write wType
  viBuf.WriteWord(1);

  //Write key
  viBuf.WriteString(L"StringFileInfo");

  POSITION posString = m_lstStringTables.GetHeadPosition();
  while (posString) {
    CStringTable * pString = (CStringTable*) m_lstStringTables.GetNext(posString);
    pString->Write(viBuf);
  }
  //Set the size of the structure based on current offset from the position
  viBuf.WriteStructSize(pos);
}

//////////////////////////////////////////////////////////////////////
// Operations

BOOL CStringFileInfo::IsEmpty()
{
  return m_lstStringTables.IsEmpty();
}

DWORD CStringFileInfo::GetStringTableCount()
{
  return m_lstStringTables.GetCount();
}

CStringTable& CStringFileInfo::GetFirstStringTable()
{
  return (CStringTable&)*m_lstStringTables.GetHead();
}

const CStringTable& CStringFileInfo::GetFirstStringTable() const
{
  return (CStringTable&)*m_lstStringTables.GetHead();
}

CStringTable& CStringFileInfo::GetStringTable(const CString& strKey)
{
  CStringTable *pStringTable = NULL;
  if (!m_mapStringTables.Lookup(strKey, (CObject*&)pStringTable)) {
    pStringTable = new CStringTable(strKey);
    AddStringTable(pStringTable);
  }

  return *pStringTable;
}

const CStringTable& CStringFileInfo::GetStringTable(const CString& strKey) const
{
  CStringTable *pStringTable = NULL;
  m_mapStringTables.Lookup(strKey, (CObject*&)pStringTable);
  // This may return *NULL, be carefull
  return *pStringTable;
}

CStringTable& CStringFileInfo::operator [] (const CString &strKey)
{
  return GetStringTable(strKey);
}

const CStringTable& CStringFileInfo::operator [] (const CString &strKey) const
{
  return GetStringTable(strKey);
}

BOOL CStringFileInfo::HasStringTable(const CString &strKey) const
{
  CObject *pDummyObject;
  return m_mapStringTables.Lookup(strKey, pDummyObject);
}

CStringTable& CStringFileInfo::AddStringTable(const CString &strKey)
{
  return GetStringTable(strKey);
}

CStringTable& CStringFileInfo::AddStringTable(CStringTable* pStringTable)
{
  m_lstStringTables.AddTail(pStringTable);
  m_mapStringTables.SetAt(pStringTable->GetKey(), pStringTable);
  return *pStringTable;
}

POSITION CStringFileInfo::GetFirstStringTablePosition() const
{
  return m_lstStringTables.GetHeadPosition();
}

CStringTable* CStringFileInfo::GetNextStringTable(POSITION &pos)
{
  return (CStringTable*) m_lstStringTables.GetNext(pos);
}

const CStringTable* CStringFileInfo::GetNextStringTable(POSITION &pos) const
{
  return (CStringTable*) m_lstStringTables.GetNext(pos);
}

BOOL CStringFileInfo::SetStringTableKey(const CString &strOldKey, const CString &strNewKey)
{
  CStringTable *pStringTable = NULL;
  if (m_mapStringTables.Lookup(strOldKey, (CObject*&)pStringTable)) {
    pStringTable->SetKey(strNewKey);
    m_mapStringTables.RemoveKey(strOldKey);
    m_mapStringTables.SetAt(strNewKey, pStringTable);

    return TRUE;
  }

  return FALSE;
}

void CStringFileInfo::Reset()
{
  while (!m_lstStringTables.IsEmpty())
    delete m_lstStringTables.RemoveTail();

  m_mapStringTables.RemoveAll();
}
