
#__FILE__ _"C:\Users\Billy\Dropbox\Thesis\Projects\pwsafe-3.32-src\src\Tools\Windows\I18N\ResPWSL\StringTable.cpp" 0
//
// This code was written by Denis Zabavchik as at 29 November 2006.
// It is unmodified except for possibly formatting.
// His article on "Modification of Version Information Resources in compiled binaries"
// can be found at: http://www.codeproject.com/library/VerInfoLib.asp
//

// StringTable.cpp: implementation of the CStringTable class.
//
//////////////////////////////////////////////////////////////////////

                  
#__FILE__ _"C:\Users\Billy\Dropbox\Thesis\Projects\pwsafe-3.32-src\src\Tools\Windows\I18N\ResPWSL\stdafx.h" 0
// stdafx.h : include file for standard system include files,
//  or project specific include files that are used frequently, but
//      are changed infrequently
//

       

                                                                             

                           // MFC core and standard components
                           // MFC extensions

                  

#__FILE__ _"C:\Users\Billy\Dropbox\Thesis\Projects\pwsafe-3.32-src\src\Tools\Windows\I18N\ResPWSL\StringTable.cpp" 12
                       
#__FILE__ _"C:\Users\Billy\Dropbox\Thesis\Projects\pwsafe-3.32-src\src\Tools\Windows\I18N\ResPWSL\StringTable.h" 0
//
// This code was written by Denis Zabavchik as at 29 November 2006.
// It is unmodified except for possibly formatting.
// His article on "Modification of Version Information Resources in compiled binaries"
// can be found at: http://www.codeproject.com/library/VerInfoLib.asp
//

// StringTable.h: interface for the CStringTable class.
//
//////////////////////////////////////////////////////////////////////

       

                             
#__FILE__ _"C:\Users\Billy\Dropbox\Thesis\Projects\pwsafe-3.32-src\src\Tools\Windows\I18N\ResPWSL\VersionInfoString.h" 0
//
// This code was written by Denis Zabavchik as at 29 November 2006.
// It is unmodified except for possibly formatting.
// His article on "Modification of Version Information Resources in compiled binaries"
// can be found at: http://www.codeproject.com/library/VerInfoLib.asp
//

// VersionInfoString.h: interface for the CVersionInfoString class.
//
//////////////////////////////////////////////////////////////////////

       

                                       
#__FILE__ _"C:\Users\Billy\Dropbox\Thesis\Projects\pwsafe-3.32-src\src\Tools\Windows\I18N\ResPWSL\VersionInfoHelperStructures.h" 0
//
// This code was written by Denis Zabavchik as at 29 November 2006.
// It is unmodified except for possibly formatting.
// His article on "Modification of Version Information Resources in compiled binaries"
// can be found at: http://www.codeproject.com/library/VerInfoLib.asp
//

// ******************************************************************
//  VersionInfoHelperStructures   version:  1.0   ·  date: 03/06/2006
//  -----------------------------------------------------------------
//  -----------------------------------------------------------------

//////////////////////////////////////////////////////////////////////////
// Helper structures
// All Version structures are essentially the same, and are declared to
// increase code readability
//

       

                                                    

struct BaseVersionStruct {
  WORD        wLength; 
  WORD        wValueLength; 
  WORD        wType; 
  WCHAR       szKey[1]; 
  WORD        Padding[1]; 
};

struct VERSION_INFO_HEADER: public BaseVersionStruct{ 
  VS_FIXEDFILEINFO Value; 
};

struct String: public BaseVersionStruct{ 
  WORD   Value[1]; 
}; 

struct StringTable: public BaseVersionStruct { 
  String Children[1]; 
};

struct Var: public BaseVersionStruct { 
  DWORD Value[1]; 
}; 


struct BaseFileInfo: public BaseVersionStruct 
{ 
};

struct StringFileInfo: public BaseFileInfo { 
  StringTable Children[1]; 
};

struct VarFileInfo: public BaseFileInfo  { 
  Var   Children[1]; 
}; 

#__FILE__ _"C:\Users\Billy\Dropbox\Thesis\Projects\pwsafe-3.32-src\src\Tools\Windows\I18N\ResPWSL\VersionInfoString.h" 21

class CVersionInfoBuffer;

class CVersionInfoString: public CObject
{
public:
  CVersionInfoString(String* pString);
  CVersionInfoString(const CString& strKey, const CString& strValue = "");

  const CString& GetKey() const;
  const CString& GetValue() const;

  CString& GetValue();

  void FromString(String* pString);
  void Write(CVersionInfoBuffer & viBuf);
private:
  CString m_strKey;
  CString m_strValue;
};

#__FILE__ _"C:\Users\Billy\Dropbox\Thesis\Projects\pwsafe-3.32-src\src\Tools\Windows\I18N\ResPWSL\StringTable.h" 21

                                       
#__FILE__ _"C:\Users\Billy\Dropbox\Thesis\Projects\pwsafe-3.32-src\src\Tools\Windows\I18N\ResPWSL\VersionInfoHelperStructures.h" 0
//
// This code was written by Denis Zabavchik as at 29 November 2006.
// It is unmodified except for possibly formatting.
// His article on "Modification of Version Information Resources in compiled binaries"
// can be found at: http://www.codeproject.com/library/VerInfoLib.asp
//

// ******************************************************************
//  VersionInfoHelperStructures   version:  1.0   ·  date: 03/06/2006
//  -----------------------------------------------------------------
//  -----------------------------------------------------------------

//////////////////////////////////////////////////////////////////////////
// Helper structures
// All Version structures are essentially the same, and are declared to
// increase code readability
//

       

                                                    

struct BaseVersionStruct {
  WORD        wLength; 
  WORD        wValueLength; 
  WORD        wType; 
  WCHAR       szKey[1]; 
  WORD        Padding[1]; 
};

struct VERSION_INFO_HEADER: public BaseVersionStruct{ 
  VS_FIXEDFILEINFO Value; 
};

struct String: public BaseVersionStruct{ 
  WORD   Value[1]; 
}; 

struct StringTable: public BaseVersionStruct { 
  String Children[1]; 
};

struct Var: public BaseVersionStruct { 
  DWORD Value[1]; 
}; 


struct BaseFileInfo: public BaseVersionStruct 
{ 
};

struct StringFileInfo: public BaseFileInfo { 
  StringTable Children[1]; 
};

struct VarFileInfo: public BaseFileInfo  { 
  Var   Children[1]; 
}; 

#__FILE__ _"C:\Users\Billy\Dropbox\Thesis\Projects\pwsafe-3.32-src\src\Tools\Windows\I18N\ResPWSL\StringTable.h" 23

class CStringTable: public CObject
{
public:
  //Construction
  CStringTable(const CString& strKey);
  CStringTable(WORD wLang, WORD wCodePageC);
  CStringTable(StringTable* pStringTable);
  virtual ~CStringTable();

  // Returns table key (language ID/codepage)
  const CString& GetKey() const;
  
  // Loads string table from resource structure in memory
  void FromStringTable(StringTable* pStringTable);
  
  // Saves string table to version info buffer
  void Write(CVersionInfoBuffer & viBuf);

  // Overloaded bracket operators used to access strings in the table
  const CString operator [] (const CString &strName) const;
  CString &operator [] (const CString &strName);

  // Iterative access to string objects in table
  POSITION GetFirstStringPosition() const;
  const CVersionInfoString* GetNextString(POSITION &pos) const;
  CVersionInfoString* GetNextString(POSITION &pos);

  // Retrieves the list of string names into a CStringList
  void GetStringNames(CStringList &slNames, BOOL bMerge = FALSE) const;

  friend class CStringFileInfo;
private:
  //Set key renames/changes the language/codepage for the table, accessible
  // only via CStringFileInfo::SetStringTableKey()
  void SetKey(const CString& strKey);

  CObList m_lstStrings;
  CMapStringToOb m_mapStrings;
  CString m_strKey;
};


#__FILE__ _"C:\Users\Billy\Dropbox\Thesis\Projects\pwsafe-3.32-src\src\Tools\Windows\I18N\ResPWSL\StringTable.cpp" 13
                             
#__FILE__ _"C:\Users\Billy\Dropbox\Thesis\Projects\pwsafe-3.32-src\src\Tools\Windows\I18N\ResPWSL\VersionInfoBuffer.h" 0
//
// This code was written by Denis Zabavchik as at 29 November 2006.
// It is unmodified except for possibly formatting.
// His article on "Modification of Version Information Resources in compiled binaries"
// can be found at: http://www.codeproject.com/library/VerInfoLib.asp
//

// VersionInfoBuffer.h: interface for the CVersionInfoBuffer class.
//
//////////////////////////////////////////////////////////////////////

       

// Helper class for VersionInfo (auto reallocation of buffer, and helpful functions like Pad, PadToDWORD, WriteStructSize
class CVersionInfoBuffer : public CObject  
{
public:

  CVersionInfoBuffer();
  virtual ~CVersionInfoBuffer();

  // Writes data to the buffer
  void Write(LPVOID lpData, DWORD dwSize);

  // Writes string to the buffer (converts to Unicode)
  WORD WriteString(const CString& strValue);

  // Writes a WORD to the buffer
  void WriteWord(WORD wData);

  // Writes the difference between specified offset and current length to a WORD at given offset
  // this writing the structure size wLength
  void WriteStructSize(DWORD dwOffsetOfSizeMemember);

  // Returns current position
  DWORD GetPosition();

  // Allings to DWORD (pads with 0s)
  DWORD PadToDWORD();

  // Pads with zeroes 
  DWORD Pad(WORD wLength);

  // Get pointer to data (pointer can not be used after any writes made after calling GetData() due to possible relocation)
  const LPBYTE GetData();
private:
  DWORD m_dwPosition;
  DWORD m_dwBufSize;
  LPBYTE m_lpData;
protected:
  void ReallocBuffer(DWORD dwMinimumSize);
};

#__FILE__ _"C:\Users\Billy\Dropbox\Thesis\Projects\pwsafe-3.32-src\src\Tools\Windows\I18N\ResPWSL\StringTable.cpp" 14

             
                
                                 
                     
      

//////////////////////////////////////////////////////////////////////
// Construction/Destruction

CStringTable::CStringTable(const CString& strKey):m_strKey(strKey)
{
}

CStringTable::CStringTable(WORD wLang, WORD wCodePage)
{
  CString strKey;
  strKey.Format(_T("%04x%04x"), wLang, wCodePage);

  SetKey(strKey);
}

CStringTable::CStringTable(StringTable* pStringTable)
{
  FromStringTable(pStringTable);
}

CStringTable::~CStringTable()
{
  while (!m_lstStrings.IsEmpty())
    delete m_lstStrings.RemoveTail();

  m_mapStrings.RemoveAll();
}

//////////////////////////////////////////////////////////////////////
// Loading/saving

void CStringTable::FromStringTable(StringTable* pStringTable)
{
  m_strKey = pStringTable->szKey;

  String* pString = (String*) (((DWORD)(LPBYTE) &pStringTable->szKey[wcslen(pStringTable->szKey)+1] + 3) & ~3);
  while ((DWORD)pString < ((DWORD) pStringTable + pStringTable->wLength)) {
    CVersionInfoString* pVIString = new CVersionInfoString(pString);
    m_lstStrings.AddTail(pVIString);
    m_mapStrings.SetAt(pVIString->GetKey(), pVIString);

    pString = (String*) (((DWORD)(LPBYTE) (DWORD) pString + pString->wLength + 3) & ~3);
  }
}

void CStringTable::Write(CVersionInfoBuffer & viBuf)
{
  //Pad to DWORD and save position for wLength
  DWORD pos = viBuf.PadToDWORD();

  //Skip size for now;
  viBuf.Pad(sizeof WORD);

  //Write wValueLength
  viBuf.WriteWord(0);

  //Write wType
  viBuf.WriteWord(1);

  //Write key
  viBuf.WriteString(m_strKey);

  POSITION posString = m_lstStrings.GetHeadPosition();
  while (posString) {
    CVersionInfoString * pString = (CVersionInfoString*) m_lstStrings.GetNext(posString);
    pString->Write(viBuf);
  }
  //Set the size of the structure based on current offset from the position
  viBuf.WriteStructSize(pos);
}

//////////////////////////////////////////////////////////////////////////
// Operations

const CString& CStringTable::GetKey() const
{
  return m_strKey;
}

void CStringTable::SetKey(const CString& strKey)
{
  m_strKey = strKey;
}

CString & CStringTable::operator [] (const CString &strName)
{
  CVersionInfoString* pVIString = NULL;
  if (!m_mapStrings.Lookup(strName, (CObject*&)pVIString)) {
    pVIString = new CVersionInfoString(strName);
    m_lstStrings.AddTail(pVIString);
    m_mapStrings.SetAt(strName, pVIString);
  }

  return pVIString->GetValue();
}

const CString CStringTable::operator [] (const CString &strName) const
{
  CVersionInfoString* pVIString = NULL;
  if (!m_mapStrings.Lookup(strName, (CObject*&)pVIString)) {
    return "";
  }

  return pVIString->GetValue();
}

POSITION CStringTable::GetFirstStringPosition() const
{
  return m_lstStrings.GetHeadPosition();
}

const CVersionInfoString* CStringTable::GetNextString(POSITION &pos) const
{
  return (CVersionInfoString*)m_lstStrings.GetNext(pos);
}

CVersionInfoString* CStringTable::GetNextString(POSITION &pos)
{
  return (CVersionInfoString*)m_lstStrings.GetNext(pos);
}


void CStringTable::GetStringNames(CStringList &slNames, BOOL bMerge) const
{
  if (!bMerge)
    slNames.RemoveAll();

  POSITION pos = m_lstStrings.GetHeadPosition();
  while (pos) {
    CVersionInfoString* pviString = (CVersionInfoString*)m_lstStrings.GetNext(pos);
    slNames.AddTail(pviString->GetKey());
  }
}
