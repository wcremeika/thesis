
#__FILE__ _"C:\Users\Billy\Dropbox\Thesis\Projects\pwsafe-3.32-src\src\test\BlowFishTest.h" 0

/*
* Copyright (c) 2003-2013 Rony Shapiro <ronys@users.sourceforge.net>.
* All rights reserved. Use of the code is allowed under the
* Artistic License 2.0 terms, as specified in the LICENSE file
* distributed with this code, or available from
* http://www.opensource.org/licenses/artistic-license-2.0.php
*/
// BlowFishTest.h: Unit test for BlowFish implementation
                
#__FILE__ _"C:\Users\Billy\Dropbox\Thesis\Projects\pwsafe-3.32-src\src\test\test.h" 0
/*
* Copyright (c) 2003-2013 Rony Shapiro <ronys@users.sourceforge.net>.
* All rights reserved. Use of the code is allowed under the
* Artistic License 2.0 terms, as specified in the LICENSE file
* distributed with this code, or available from
* http://www.opensource.org/licenses/artistic-license-2.0.php
*/
// test.h

              
              

                
                

using std::string;
using std::ostream;

// The following have underscores because they are macros
// (and it's impolite to usurp other users' functions!).
// For consistency, _succeed() also has an underscore.
                                                            
                                                   

class Test
{
public:
  Test(ostream* osptr = 0);
  virtual ~Test(){}
  virtual void run() = 0;

  long getNumPassed() const;
  long getNumFailed() const;
  const ostream* getStream() const;
  void setStream(ostream* osptr);

  void _succeed();
  long report() const;
  virtual void reset();

protected:
  void do_test(bool cond, const string& lbl,
    const char* fname, long lineno);
  void do_fail(const string& lbl,
    const char* fname, long lineno);

private:
  ostream* m_osptr;
  long m_nPass;
  long m_nFail;

  // Disallowed:
  Test(const Test&);
  Test& operator=(const Test&);
};

inline
Test::Test(ostream* osptr)
{
  m_osptr = osptr;
  m_nPass = m_nFail = 0;
}

inline
long Test::getNumPassed() const
{
  return m_nPass;
}

inline
long Test::getNumFailed() const
{
  return m_nFail;
}

inline
const ostream* Test::getStream() const
{
  return m_osptr;
}

inline
void Test::setStream(ostream* osptr)
{
  m_osptr = osptr;
}

inline
void Test::_succeed()
{
  ++m_nPass;
}

inline
void Test::reset()
{
  m_nPass = m_nFail = 0;
}
      


#__FILE__ _"C:\Users\Billy\Dropbox\Thesis\Projects\pwsafe-3.32-src\src\test\BlowFishTest.h" 10
                         
#__FILE__ _"C:\Users\Billy\Dropbox\Thesis\Projects\pwsafe-3.32-src\src\core/BlowFish.h" 0
/*
* Copyright (c) 2003-2013 Rony Shapiro <ronys@users.sourceforge.net>.
* All rights reserved. Use of the code is allowed under the
* Artistic License 2.0 terms, as specified in the LICENSE file
* distributed with this code, or available from
* http://www.opensource.org/licenses/artistic-license-2.0.php
*/
// BlowFish.h
//-----------------------------------------------------------------------------
                    
                    

                
#__FILE__ _"C:\Users\Billy\Dropbox\Thesis\Projects\pwsafe-3.32-src\src\core\Fish.h" 0
/*
* Copyright (c) 2003-2013 Rony Shapiro <ronys@users.sourceforge.net>.
* All rights reserved. Use of the code is allowed under the
* Artistic License 2.0 terms, as specified in the LICENSE file
* distributed with this code, or available from
* http://www.opensource.org/licenses/artistic-license-2.0.php
*/
// Fish.h
                
                

/**
* Fish is an abstract base class for BlowFish and TwoFish
* (and for any block cipher, but it's cooler to call it "Fish"
* rather than "Cipher"...)
*/

class Fish
{
public:
  Fish() {}
  virtual ~Fish() {}
  virtual unsigned int GetBlockSize() const = 0;
  // Following encrypt/decrypt a single block
  // (blocksize dependent on cipher)
  virtual void Encrypt(const unsigned char *pt, unsigned char *ct) = 0;
  virtual void Decrypt(const unsigned char *ct, unsigned char *pt) = 0;
};

       /* __FISH_H */

#__FILE__ _"C:\Users\Billy\Dropbox\Thesis\Projects\pwsafe-3.32-src\src\core/BlowFish.h" 17
                       
#__FILE__ _"C:\Users\Billy\Dropbox\Thesis\Projects\pwsafe-3.32-src\src\os/typedefs.h" 0
/*
* Copyright (c) 2003-2013 Rony Shapiro <ronys@users.sourceforge.net>.
* All rights reserved. Use of the code is allowed under the
* Artistic License 2.0 terms, as specified in the LICENSE file
* distributed with this code, or available from
* http://www.opensource.org/licenses/artistic-license-2.0.php
*/
                   
                   

/**
* Silly wrapper to abstract away the difference between a Unicode
* (wchar_t) and non-Unicode (char) std::string, as well as
* Linux/Windows portability.
*
*/

                
/*
 * _S is defined same as m'soft's _T, just to avoid collisions or
 * lousy include order dependencies.
 */

// Sometimes we need specific ones irrespective of in Unicode mode or not.
// In particular, the underlying format of most XML is Unicode.
typedef std::wstring wstringT;
typedef std::string  cstringT;

              
                             
                      
                    
     
typedef std::string stringT;
typedef char charT;
               
      

                               
#__FILE__ _"C:\Users\Billy\Dropbox\Thesis\Projects\pwsafe-3.32-src\src\os\../core/PwsPlatform.h" 0
/*
* Copyright (c) 2003-2013 Rony Shapiro <ronys@users.sourceforge.net>.
* All rights reserved. Use of the code is allowed under the
* Artistic License 2.0 terms, as specified in the LICENSE file
* distributed with this code, or available from
* http://www.opensource.org/licenses/artistic-license-2.0.php
*/
// pws_platform.h
//------------------------------------------------------------------------------
//
// This header file exists to determine, at compile time, which target we're
// compiling to and to make the appropriate #defines and #includes.
//
// The following macros are defined:
//
//    PWS_BIG_ENDIAN    - Defined only if the target CPU is big-endian.
//    PWS_LITTLE_ENDIAN - Defined only if the target CPU is little-endian.
//    PWS_PLATFORM      - A string, the target platform, e.g. "Pocket PC".
//    PWS_PLATFORM_EX   - A string, the target platform, e.g. "Pocket PC 2000".
//    POCKET_PC         - Defined only if target is Pocket PC 2000 or later.
//    POCKET_PC_VER     - Defined only if target is Pocket PC 2000 or later.
//
// Notes:
//
// 1. PWS_BIG_ENDIAN and PWS_LITTLE_ENDIAN are mutually exclusive.
// 2. PWS_BIG_ENDIAN and PWS_LITTLE_ENDIAN may be defined on the complier
//    command line but checks are made to ensure that one and only one is
//    defined.
//
// Supported Configurations:
// -------------------------
//
// Pocket PC:
//
//    2000 ARM
//    2000 MIPS
//    2000 SH3
//    2000 x86 Emulator
//    2002 ARM
//    2002 x86 Emulator
//    2003 ARM (untested)
//    2003 x86 Emulator (untested)
//
// Windows
//
//    Win32 X86
//    Win32 and Win64 x64
//
// Linux - work in progress
// Cygwin - work in progress

                       
                       

                                                             
                                                  
                                 
     
// some globally useful includes for non-Windows
                 
      

                
                  
      

// Following seems needed on Linux/cygwin
                                             
                   
      

// stop MS VC++ 6 and earlier being quite so pedantic
                                                                             
       
      

                   
                

                   
                 
                      
      
                    
                         
      
      

// PWS_BIG_ENDIAN and PWS_LITTLE_ENDIAN can be specified on the 
                           
                     
                      
      

                              
                        
                         
      

                            
                                                 
                                                 
                                                 
                              
                                
                                        
                          
                 
                                                           
                                 
                         
                                     
                         
                                   
                         
                                                                      
                         
      
      
                                                 
                                                 
                                                 
                                  
                                
                                        
                          
                 
                                                           
                                 
                         
                                                                      
                         
      
      
     
      
      
                                                 
                                                 
                                                 
                     
                                                                                                           
                              
                         
      
                                                 
                                                 
                                                 
                      
                            
                                                                 
                         
      
                                                 
                                                  
                                                 
                         
                             
                                          
                         
       
                                             
                                                                                          
                          
                         
                                                                                       
                                                                                    
                   
                                           
                              
     
                              
      
                                                                       
                                                           
                         
     
                      
      
                                                 
                                                 
                                                 
      

// 
                          
      
      

                                                           
      
      

                                                         
      
      

// Following from libtomcrypt, for twofish & SHA256
/* Controls endianess and size of registers.  Leave uncommented to get platform neutral [slower] code 
* 
* Note: in order to use the optimized macros your platform must support unaligned 32 and 64 bit read/writes.
* The x86 platforms allow this but some others [ARM for instance] do not.  On those platforms you **MUST**
* use the portable [slower] macros.
*/

/* detect x86-32 machines somewhat */
                                                                                                                                                                                 
                     
                        
      

/* detects MIPS R5900 processors (PS2) */
                                                                                                                        
                     
                        
      

/* detect amd64 */
                                                                
                     
                        
      

/* #define ENDIAN_LITTLE */
/* #define ENDIAN_BIG */

/* #define ENDIAN_32BITWORD */
/* #define ENDIAN_64BITWORD */

                                                                                                                
      
      

                                                    
                      
      

/* fix for MSVC ...evil! */
               
                            
                                 
     
                           
typedef uint64_t ulong64;
      

/* this is the "32-bit at least" data type 
* Re-define it to suit your platform but it must be at least 32-bits 
*/
                       
                         
     
typedef unsigned long ulong32;
      

/* ---- HELPER MACROS ---- */
                     

                                                                                                                                                                                                                                                                                                           



                                                                                                                                                                                                                                                             











                                                                                                                                                                                                                                                                                                                                                                                                                                                





                                                                                                                                                                                                                                                                                                           



                                                                                                                                                                                                                                                             











                                                                                                                                                                                                                                                                                                                                                                                                                                                  





       /* ENDIAN_NEUTRAL */

                    

                                                                                                                                                                                                                                                                                                           



                                                                                                                                                                                                                                                             





                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         





                                                                                                                                                                                                                                                                                                                                                                                                                                                  





                       

                                                                              


                                                   








                                                                                                                                                                                                                                                                                                                                                                                                                                                





                              

                                                                              


                                                                      


                                                                        


                                                     


                             

       /* ENDIAN_LITTLE */

                 
                                                                                                                                                                                                                                                                                                           



                                                                                                                                                                                                                                                             











                                                                                                                                                                                                                                                                                                                                                                                                                                                  





                       

                                                                              


                                                   








                                                                                                                                                                                                                                                                                                                                                                                                                                                 





                              

                                                                              


                                                                      


                                                                        


                                                     


                             
       /* ENDIAN_BIG */

                                                                                                                         



/* 32-bit Rotates */
                     

                       
                   
       
                            
                            
                             
                             

                                                                                                                   

                                                
 
                     
                
                         
              
 

                                                
 
                     
                
                         
              
 

                   

                                                       
 
                   
                
                         
              
 

                                                       
 
                   
                
                         
              
 

     

                
                

      

     

/* rotates the hard way */
                                                                                                                                                                                                   
                                                                                                                                                                                                   
                                                                                                                                                                                                    
                                                                                                                                                                                                    

      


/* 64-bit Rotates */
                                                                    

                                                            
 
                    
                
                         
              
 

                                                            
 
                    
                
                         
              
 

                   

                                                                   
 
                  
                
                         
              
 

                                                                   
 
                  
                
                         
              
 

                       

                  
                  

      

      /* Not x86_64  */

                                                                                                                                                                       



                                                                                                                                                                                           



                                                                                                                                                                        



                                                                                                                                                                                            



      

          
          
                                       
                                       

/* extract a byte portably */
               
                                                                 
     
                                             
         

                                                           

                                          
                                           
      

       /* __PWSPLATFORM_H */

#__FILE__ _"C:\Users\Billy\Dropbox\Thesis\Projects\pwsafe-3.32-src\src\os/typedefs.h" 46 // for afxwin.h, and endian macros

// Hotkey values. Internal PWS values - need to convert to either MFC or wxWidgets
// values in the GUI when retrieving these from the preferences and aso back to PWS
// internal values before giving them to PWSPrefs for saving in the XML config file.
                                
                                
                                
                                
 
// wxWidgets Only - Not used in Windows MFC
                                                                 
                                
                                
                                

             
                  
                     
                      
                      
                      

                               
                                
                                
                                

                                 
                                 

                          

                     

                                                             
               
               
               

             
                  

                            
                         
                           
                                                              
            
              
      
             
               
      
                    

      /* !defined(_WIN32) */
                  
                     
typedef int8_t  int8;
typedef int16_t int16;
typedef int32_t int32;
typedef int64_t int64;

typedef uint8_t  uint8;
typedef uint16_t uint16;
typedef uint32_t uint32;
typedef uint64_t uint64;

typedef int errno_t;

              
          
                    
      
                      
     
               
typedef char TCHAR;
typedef wchar_t WCHAR;
       /* UNICODE */

// mimic Microsoft conventional typdefs:
typedef TCHAR *LPTSTR;
typedef const TCHAR *LPCTSTR;
typedef bool BOOL;
typedef unsigned char BYTE;
typedef uint16_t WORD;
typedef uint32_t DWORD;
typedef int32_t LONG;
                              
                             
                                                   
                                             
                                          
                                                                                        
                                                                           	
                             
                             
                                                   
                                             
                                          
                                                                                        
                                                                           	
     
      
      
typedef int32_t LPARAM;
typedef unsigned int UINT;
typedef int HANDLE;
                                       

// assorted conveniences:
                           
                                                      
                           
            
                 
      
             
                   
      

/* These two files require the above definitions */
                 
#__FILE__ _"C:\Users\Billy\Dropbox\Thesis\Projects\pwsafe-3.32-src\src\os\debug.h" 0
/*
* Copyright (c) 2003-2013 Rony Shapiro <ronys@users.sourceforge.net>.
* All rights reserved. Use of the code is allowed under the
* Artistic License 2.0 terms, as specified in the LICENSE file
* distributed with this code, or available from
* http://www.opensource.org/licenses/artistic-license-2.0.php
*/

                  
                  

                    
#__FILE__ _"C:\Users\Billy\Dropbox\Thesis\Projects\pwsafe-3.32-src\src\os\typedefs.h" 0
/*
* Copyright (c) 2003-2013 Rony Shapiro <ronys@users.sourceforge.net>.
* All rights reserved. Use of the code is allowed under the
* Artistic License 2.0 terms, as specified in the LICENSE file
* distributed with this code, or available from
* http://www.opensource.org/licenses/artistic-license-2.0.php
*/
                   
                   

   
                                                                 
                                                          
                            
 
  

                 
  
                                                                 
                                    
   

                                                                          
                                                               
                              
                              

              
                             
                      
                    
     
                            
                   
               
      

                                                                   

                                                                                  
                                                                                   
                                                                                    
                                
                                
                                
                                
 
                                           
                                                                 
                                
                                
                                

             
                  
                     
                      
                      
                      

                               
                                
                                
                                

                                 
                                 

                          

                     

                                                             
               
               
               

             
                  

                            
                         
                           
                                                              
            
              
      
             
               
      
                    

                            
                   
                      
                     
                      
                      
                      

                       
                        
                        
                        

                    

              
          
                    
      
                      
     
               
                   
                      
                    

                                        
                      
                             
                  
                           
                      
                       
                     
                              
                             
                                                   
                                             
                                          
                                                                                        
                                                                           	
                             
                             
                                                   
                                             
                                          
                                                                                        
                                                                           	
     
      
      
                       
                          
                   
                                       

                         
                           
                                                      
                           
            
                 
      
             
                   
      

                                                   
                  
                           
                   

       /* _TYPEDEFS_H */

#__FILE__ _"C:\Users\Billy\Dropbox\Thesis\Projects\pwsafe-3.32-src\src\os\debug.h" 14
             
                   
      

namespace pws_os {
  // MFC TRACE equivalent in MFC, non-MFC Windows and non-Windows
  void Trace(LPCTSTR lpszFormat, ...);
  void Trace0(LPCTSTR lpszFormat);

  // Opens a messagebox or write to debugger window 
  // with text of last system error, titlebar
  // is csFunction
  void IssueError(const stringT &csFunction, bool bMsgBox = true);

  /*
    Outputs a printable version of memory dump (hex + ascii)

    parameters:
      pmemory   - pointer to memory to format
      length    - length memory to format in bytes
      cs_prefix - prefix each line with this
      maxnum    - maximum hex characters dumped per line
  */
  void HexDump(unsigned char *pmemory, const int &length,
               const stringT &cs_prefix = "", const int &maxnum = 16);
}

       /* _OSDEBUG_H */

#__FILE__ _"C:\Users\Billy\Dropbox\Thesis\Projects\pwsafe-3.32-src\src\os/typedefs.h" 224
                          
#__FILE__ _"C:\Users\Billy\Dropbox\Thesis\Projects\pwsafe-3.32-src\src\os\linux/pws_time.h" 0
/*
* Copyright (c) 2003-2013 Rony Shapiro <ronys@users.sourceforge.net>.
* All rights reserved. Use of the code is allowed under the
* Artistic License 2.0 terms, as specified in the LICENSE file
* distributed with this code, or available from
* http://www.opensource.org/licenses/artistic-license-2.0.php
*/
                    
                    

                       
#__FILE__ _"C:\Users\Billy\Dropbox\Thesis\Projects\pwsafe-3.32-src\src\os\linux\../typedefs.h" 0
/*
* Copyright (c) 2003-2013 Rony Shapiro <ronys@users.sourceforge.net>.
* All rights reserved. Use of the code is allowed under the
* Artistic License 2.0 terms, as specified in the LICENSE file
* distributed with this code, or available from
* http://www.opensource.org/licenses/artistic-license-2.0.php
*/
                   
                   

   
                                                                 
                                                          
                            
 
  

                 
  
                                                                 
                                    
   

                                                                          
                                                               
                              
                              

              
                             
                      
                    
     
                            
                   
               
      

                                                                   

                                                                                  
                                                                                   
                                                                                    
                                
                                
                                
                                
 
                                           
                                                                 
                                
                                
                                

             
                  
                     
                      
                      
                      

                               
                                
                                
                                

                                 
                                 

                          

                     

                                                             
               
               
               

             
                  

                            
                         
                           
                                                              
            
              
      
             
               
      
                    

                            
                   
                      
                     
                      
                      
                      

                       
                        
                        
                        

                    

              
          
                    
      
                      
     
               
                   
                      
                    

                                        
                      
                             
                  
                           
                      
                       
                     
                              
                             
                                                   
                                             
                                          
                                                                                        
                                                                           	
                             
                             
                                                   
                                             
                                          
                                                                                        
                                                                           	
     
      
      
                       
                          
                   
                                       

                         
                           
                                                      
                           
            
                 
      
             
                   
      

                                                   
                  
                           
                   

       /* _TYPEDEFS_H */

#__FILE__ _"C:\Users\Billy\Dropbox\Thesis\Projects\pwsafe-3.32-src\src\os\linux/pws_time.h" 13
                  
typedef time_t __time32_t;
typedef uint64_t __time64_t;

extern struct tm *gmtime64_r(const __time64_t *timep, struct tm *result);

namespace pws_os {
  /**
   * Workaround the lack of a wchar_t version of asctime()
   */
  extern int asctime(TCHAR *buf, size_t N, const struct tm *tm);
}

       /* __PWS_TIME_H */
//-----------------------------------------------------------------------------
// Local variables:
// mode: c++
// End:

#__FILE__ _"C:\Users\Billy\Dropbox\Thesis\Projects\pwsafe-3.32-src\src\os/typedefs.h" 225
       /* _WIN32 */

       /* _TYPEDEFS_H */

#__FILE__ _"C:\Users\Billy\Dropbox\Thesis\Projects\pwsafe-3.32-src\src\core/BlowFish.h" 18

class BlowFish : public Fish
{
public:
  static BlowFish *MakeBlowFish(const unsigned char *pass, int passlen,
                                const unsigned char *salt, int saltlen);

  enum {BLOCKSIZE = 8};

  BlowFish(const unsigned char* key, int keylen);
  virtual ~BlowFish();
  virtual void Encrypt(const unsigned char *in, unsigned char *out);
  virtual void Decrypt(const unsigned char *in, unsigned char *out);
  virtual unsigned int GetBlockSize() const {return BLOCKSIZE;}

private:
  enum {bf_N = 16};
  uint32 bf_S[4][256];
  uint32 bf_P[bf_N + 2];
  static const uint32 tempbf_S[4][256];
  static const uint32 tempbf_P[bf_N + 2];
  void Blowfish_encipher(uint32* xl, uint32* xr);
  void Blowfish_decipher(uint32* xl, uint32* xr);
  void InitializeBlowfish(const unsigned char key[], short keybytes);
};
       /* __BLOWFISH_H */
//-----------------------------------------------------------------------------
// Local variables:
// mode: c++
// End:

#__FILE__ _"C:\Users\Billy\Dropbox\Thesis\Projects\pwsafe-3.32-src\src\test\BlowFishTest.h" 11

/*
 * Test vectors from http://www.schneier.com/code/vectors.txt
 *  Description:  Eric Young's test vectors for Blowfish.
 *
 * PasswordSafe Note: To pass these tests, I had to change the
 * order of the bytes in the plaintext and ciphertext vectors,
 * from {3,2,1,0,7,6,5,4} to {0,1,2,3,4,5,6,7}. This is either a
 * (cryptographically benign) bug in the implementation, or some
 * endian-ness oddity in the test data. My guess is the former.
 */

                                 

// key bytes
unsigned char variable_key[34][8] = {
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
  {0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11},
  {0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF},
  {0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10},
  {0x7C, 0xA1, 0x10, 0x45, 0x4A, 0x1A, 0x6E, 0x57},
  {0x01, 0x31, 0xD9, 0x61, 0x9D, 0xC1, 0x37, 0x6E},
  {0x07, 0xA1, 0x13, 0x3E, 0x4A, 0x0B, 0x26, 0x86},
  {0x38, 0x49, 0x67, 0x4C, 0x26, 0x02, 0x31, 0x9E},
  {0x04, 0xB9, 0x15, 0xBA, 0x43, 0xFE, 0xB5, 0xB6},
  {0x01, 0x13, 0xB9, 0x70, 0xFD, 0x34, 0xF2, 0xCE},
  {0x01, 0x70, 0xF1, 0x75, 0x46, 0x8F, 0xB5, 0xE6},
  {0x43, 0x29, 0x7F, 0xAD, 0x38, 0xE3, 0x73, 0xFE},
  {0x07, 0xA7, 0x13, 0x70, 0x45, 0xDA, 0x2A, 0x16},
  {0x04, 0x68, 0x91, 0x04, 0xC2, 0xFD, 0x3B, 0x2F},
  {0x37, 0xD0, 0x6B, 0xB5, 0x16, 0xCB, 0x75, 0x46},
  {0x1F, 0x08, 0x26, 0x0D, 0x1A, 0xC2, 0x46, 0x5E},
  {0x58, 0x40, 0x23, 0x64, 0x1A, 0xBA, 0x61, 0x76},
  {0x02, 0x58, 0x16, 0x16, 0x46, 0x29, 0xB0, 0x07},
  {0x49, 0x79, 0x3E, 0xBC, 0x79, 0xB3, 0x25, 0x8F},
  {0x4F, 0xB0, 0x5E, 0x15, 0x15, 0xAB, 0x73, 0xA7},
  {0x49, 0xE9, 0x5D, 0x6D, 0x4C, 0xA2, 0x29, 0xBF},
  {0x01, 0x83, 0x10, 0xDC, 0x40, 0x9B, 0x26, 0xD6},
  {0x1C, 0x58, 0x7F, 0x1C, 0x13, 0x92, 0x4F, 0xEF},
  {0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01},
  {0x1F, 0x1F, 0x1F, 0x1F, 0x0E, 0x0E, 0x0E, 0x0E},
  {0xE0, 0xFE, 0xE0, 0xFE, 0xF1, 0xFE, 0xF1, 0xFE},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
  {0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF},
  {0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10},
};
// clear bytes
unsigned char plaintext_vk[34][8] = {
//  0     1     2     3     4     5     6     7    
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, },
  {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, },
  {0x00, 0x00, 0x00, 0x10, 0x01, 0x00, 0x00, 0x00, },
  {0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, },
  {0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, },
  {0x67, 0x45, 0x23, 0x01, 0xEF, 0xCD, 0xAB, 0x89, },
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, },
  {0x67, 0x45, 0x23, 0x01, 0xEF, 0xCD, 0xAB, 0x89, },
  {0xD0, 0xD6, 0xA1, 0x01, 0x42, 0x67, 0x77, 0x39, },
  {0xA8, 0x4C, 0xD5, 0x5C, 0xDA, 0x57, 0xEF, 0x3D, },
  {0x38, 0xD4, 0x48, 0x02, 0x72, 0x71, 0xF6, 0x06, },
  {0x58, 0x4B, 0x45, 0x51, 0x0A, 0x44, 0xDF, 0x2D, },
  {0x30, 0x44, 0xFD, 0x42, 0xA2, 0x7F, 0x57, 0x59, },
  {0x08, 0x5E, 0x9B, 0x05, 0x3A, 0x14, 0xCF, 0x51, },
  {0xE0, 0xD8, 0x56, 0x07, 0xD2, 0x61, 0x47, 0x77, },
  {0xB8, 0x14, 0x25, 0x76, 0x6A, 0x48, 0xBF, 0x29, },
  {0x90, 0x11, 0xDD, 0x3B, 0x02, 0x28, 0x37, 0x49, },
  {0x68, 0x5F, 0x95, 0x26, 0x9A, 0x60, 0xAF, 0x35, },
  {0x40, 0x5E, 0x4D, 0x16, 0x32, 0x52, 0x27, 0x4F, },
  {0x18, 0x6E, 0x05, 0x6B, 0xCA, 0x5C, 0x9F, 0x75, },
  {0xEF, 0xD6, 0x4B, 0x00, 0x62, 0x60, 0x17, 0x09, },
  {0x00, 0x39, 0x0D, 0x48, 0xF2, 0x62, 0xE7, 0x6E, },
  {0xC8, 0x40, 0x75, 0x43, 0xFA, 0x3C, 0x8F, 0x69, },
  {0xA0, 0x43, 0x2D, 0x07, 0x92, 0x52, 0x07, 0x77, },
  {0x77, 0x55, 0xFE, 0x02, 0x2A, 0xF1, 0x17, 0x81, },
  {0x50, 0x5C, 0x9D, 0x1D, 0xC2, 0x28, 0xF7, 0x18, },
  {0x28, 0x32, 0x55, 0x30, 0x5A, 0x29, 0x6F, 0x6D, },
  {0x67, 0x45, 0x23, 0x01, 0xEF, 0xCD, 0xAB, 0x89, },
  {0x67, 0x45, 0x23, 0x01, 0xEF, 0xCD, 0xAB, 0x89, },
  {0x67, 0x45, 0x23, 0x01, 0xEF, 0xCD, 0xAB, 0x89, },
  {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, },
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, },
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, },
  {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, },
};
// cipher bytes
unsigned char ciphertext_vk[34][8] = {
//  0     1     2     3     4     5     6     7    
  {0x45, 0x97, 0xF9, 0x4E, 0x78, 0xDD, 0x98, 0x61, },
  {0xD5, 0x6F, 0x86, 0x51, 0x8A, 0xCB, 0x5E, 0xB8, },
  {0x9A, 0x6F, 0x85, 0x7D, 0xF2, 0x63, 0x30, 0x61, },
  {0x87, 0xDD, 0x66, 0x24, 0x9D, 0x3C, 0x96, 0x8B, },
  {0x80, 0xC3, 0xF9, 0x61, 0x96, 0xB0, 0x81, 0x22, },
  {0x30, 0xC6, 0x0C, 0x7D, 0xC7, 0x1E, 0xDA, 0xAF, },
  {0x45, 0x97, 0xF9, 0x4E, 0x78, 0xDD, 0x98, 0x61, },
  {0x0F, 0xAB, 0xCE, 0x0A, 0x8D, 0xA2, 0xA0, 0xC6, },
  {0x45, 0x82, 0xC6, 0x59, 0x2B, 0x28, 0x05, 0xEB, },
  {0x0B, 0xCC, 0xB8, 0xB1, 0xA0, 0x09, 0x0F, 0x25, },
  {0x77, 0xE5, 0x30, 0x17, 0xA4, 0x1D, 0xEA, 0x8B, },
  {0x56, 0x78, 0x5E, 0xA2, 0xEB, 0x51, 0x26, 0xCF, },
  {0xB1, 0x82, 0x38, 0x35, 0x1A, 0x8F, 0xCE, 0x09, },
  {0x88, 0xD0, 0xF4, 0x48, 0x18, 0x99, 0x37, 0x4C, },
  {0xB7, 0x93, 0x21, 0x43, 0x98, 0xFC, 0x51, 0x89, },
  {0x54, 0x41, 0xF0, 0x13, 0xE5, 0x1A, 0x9D, 0xD6, },
  {0x93, 0xDA, 0xED, 0x2E, 0x79, 0x9C, 0xD3, 0xFF, },
  {0x39, 0xE0, 0x87, 0xD8, 0xE3, 0xA6, 0x2D, 0x3C, },
  {0x4F, 0xD0, 0x99, 0x5F, 0x69, 0x39, 0x16, 0x5B, },
  {0x3B, 0x7A, 0x05, 0x4A, 0x7B, 0x97, 0xD3, 0x24, },
  {0xC1, 0x31, 0x20, 0x45, 0x8E, 0xDA, 0xFA, 0xE4, },
  {0x39, 0xAE, 0x55, 0x75, 0xBD, 0x87, 0x9B, 0xF5, },
  {0x9C, 0x5F, 0xC5, 0x53, 0x19, 0xC0, 0x9F, 0xB4, },
  {0xFA, 0x7B, 0x8E, 0x7A, 0xA3, 0x89, 0x7E, 0x93, },
  {0x7A, 0x5D, 0x9C, 0xCF, 0xB5, 0xAD, 0x86, 0x49, },
  {0x90, 0xB2, 0xAB, 0xD1, 0x78, 0xC7, 0x8B, 0x65, },
  {0x74, 0x37, 0xCB, 0x55, 0x01, 0xF2, 0x3E, 0xD1, },
  {0x48, 0xEC, 0x34, 0xFA, 0xB2, 0x68, 0xB2, 0x47, },
  {0x51, 0x79, 0x90, 0xA7, 0xAE, 0x3C, 0xEA, 0x08, },
  {0x2D, 0x07, 0x9E, 0xC3, 0x1D, 0x63, 0xAC, 0x9F, },
  {0xE0, 0x33, 0x49, 0x01, 0xE4, 0xF6, 0xAF, 0xCD, },
  {0x77, 0x9A, 0x1E, 0xF2, 0xBC, 0x49, 0x1C, 0xB7, },
  {0x88, 0x46, 0x59, 0x24, 0x9A, 0x36, 0x54, 0x57, },
  {0x9C, 0x5A, 0x5C, 0x6B, 0x5A, 0x0A, 0x9E, 0x5D, },
};
     
                    
                                                                        

                           
                             
                               
                                 
                                   
                                     
                                       
                                         
                                           
                                             
                                               
                                                 
                                                   
                                                     
                                                       
                                                         
                                                           
                                                             
                                                               
                                                                 
                                                                   
                                                                     
                                                                       
                                                                         
      

class CBlowFishTest : public Test
{
public:
  CBlowFishTest()
  {
  }

  void run()
  {
    null1ktest();
    vktests();
    sktests();
  }

  void null1ktest() {
    unsigned char key[] = {0xF0, 0xE1, 0xD2, 0xC3, 0xB4, 0xA5, 0x96, 0x87,
                           0x78, 0x69, 0x5A, 0x4B, 0x3C, 0x2D, 0x1E, 0x0F,
                           0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77};
    unsigned char tmp[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    unsigned char zero[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    int i;
    BlowFish bf(key, sizeof(key));
    for (i = 0; i < 1000; i++) bf.Encrypt(tmp, tmp);
    for (i = 0; i < 1000; i++) bf.Decrypt(tmp, tmp);
    do_test(memcmp(tmp, zero, 8) == 0, "cond", "C:\\Users\\Billy\\Dropbox\\Thesis\\Projects\\pwsafe-3.32-src\\src\\test\\BlowFishTest.h", 193);
  }

  void vktests(void)
  {
    unsigned char tmp[8];
    for (int i = 0; i < 34; i++) {
      BlowFish bf(variable_key[i], 8);
      bf.Encrypt(plaintext_vk[i], tmp);
      do_test(memcmp(tmp, ciphertext_vk[i], 8) == 0, "cond", "C:\\Users\\Billy\\Dropbox\\Thesis\\Projects\\pwsafe-3.32-src\\src\\test\\BlowFishTest.h", 202);
      bf.Decrypt(ciphertext_vk[i], tmp);
      do_test(memcmp(tmp, plaintext_vk[i], 8) == 0, "cond", "C:\\Users\\Billy\\Dropbox\\Thesis\\Projects\\pwsafe-3.32-src\\src\\test\\BlowFishTest.h", 204);
    }
  }

  void sktests(void)
  {
  }
};

