
#__FILE__ _"C:\Users\Billy\Dropbox\Thesis\Projects\pwsafe-3.32-src\src\test\ItemFieldTest.h" 0
/*
* Copyright (c) 2003-2013 Rony Shapiro <ronys@users.sourceforge.net>.
* All rights reserved. Use of the code is allowed under the
* Artistic License 2.0 terms, as specified in the LICENSE file
* distributed with this code, or available from
* http://www.opensource.org/licenses/artistic-license-2.0.php
*/

                
#__FILE__ _"C:\Users\Billy\Dropbox\Thesis\Projects\pwsafe-3.32-src\src\test\test.h" 0
/*
* Copyright (c) 2003-2013 Rony Shapiro <ronys@users.sourceforge.net>.
* All rights reserved. Use of the code is allowed under the
* Artistic License 2.0 terms, as specified in the LICENSE file
* distributed with this code, or available from
* http://www.opensource.org/licenses/artistic-license-2.0.php
*/
// test.h

              
              

                
                

using std::string;
using std::ostream;

// The following have underscores because they are macros
// (and it's impolite to usurp other users' functions!).
// For consistency, _succeed() also has an underscore.
                                                            
                                                   

class Test
{
public:
  Test(ostream* osptr = 0);
  virtual ~Test(){}
  virtual void run() = 0;

  long getNumPassed() const;
  long getNumFailed() const;
  const ostream* getStream() const;
  void setStream(ostream* osptr);

  void _succeed();
  long report() const;
  virtual void reset();

protected:
  void do_test(bool cond, const string& lbl,
    const char* fname, long lineno);
  void do_fail(const string& lbl,
    const char* fname, long lineno);

private:
  ostream* m_osptr;
  long m_nPass;
  long m_nFail;

  // Disallowed:
  Test(const Test&);
  Test& operator=(const Test&);
};

inline
Test::Test(ostream* osptr)
{
  m_osptr = osptr;
  m_nPass = m_nFail = 0;
}

inline
long Test::getNumPassed() const
{
  return m_nPass;
}

inline
long Test::getNumFailed() const
{
  return m_nFail;
}

inline
const ostream* Test::getStream() const
{
  return m_osptr;
}

inline
void Test::setStream(ostream* osptr)
{
  m_osptr = osptr;
}

inline
void Test::_succeed()
{
  ++m_nPass;
}

inline
void Test::reset()
{
  m_nPass = m_nFail = 0;
}
      


#__FILE__ _"C:\Users\Billy\Dropbox\Thesis\Projects\pwsafe-3.32-src\src\test\ItemFieldTest.h" 9
                          
#__FILE__ _"C:\Users\Billy\Dropbox\Thesis\Projects\pwsafe-3.32-src\src\core/ItemField.h" 0
/*
* Copyright (c) 2003-2013 Rony Shapiro <ronys@users.sourceforge.net>.
* All rights reserved. Use of the code is allowed under the
* Artistic License 2.0 terms, as specified in the LICENSE file
* distributed with this code, or available from
* http://www.opensource.org/licenses/artistic-license-2.0.php
*/
// ItemField.h
//-----------------------------------------------------------------------------

                     
                     

                   
#__FILE__ _"C:\Users\Billy\Dropbox\Thesis\Projects\pwsafe-3.32-src\src\core\StringX.h" 0
/*
* Copyright (c) 2003-2013 Rony Shapiro <ronys@users.sourceforge.net>.
* All rights reserved. Use of the code is allowed under the
* Artistic License 2.0 terms, as specified in the LICENSE file
* distributed with this code, or available from
* http://www.opensource.org/licenses/artistic-license-2.0.php
*/

                   
                   

/**
 * \file StringX.h
 *
 * STL-based implementation of secure strings.
 * Like std::string in all respects, except that
 * memory is scrubbed before being returned to system.
 *
 */

                
                
                
                  // for ptrdiff_t
                  // for malloc
                  // for memset

                          
#__FILE__ _"C:\Users\Billy\Dropbox\Thesis\Projects\pwsafe-3.32-src\src\core\../os/typedefs.h" 0
/*
* Copyright (c) 2003-2013 Rony Shapiro <ronys@users.sourceforge.net>.
* All rights reserved. Use of the code is allowed under the
* Artistic License 2.0 terms, as specified in the LICENSE file
* distributed with this code, or available from
* http://www.opensource.org/licenses/artistic-license-2.0.php
*/
                   
                   

/**
* Silly wrapper to abstract away the difference between a Unicode
* (wchar_t) and non-Unicode (char) std::string, as well as
* Linux/Windows portability.
*
*/

                
/*
 * _S is defined same as m'soft's _T, just to avoid collisions or
 * lousy include order dependencies.
 */

// Sometimes we need specific ones irrespective of in Unicode mode or not.
// In particular, the underlying format of most XML is Unicode.
typedef std::wstring wstringT;
typedef std::string  cstringT;

              
                             
                      
                    
     
typedef std::string stringT;
typedef char charT;
               
      

                               
#__FILE__ _"C:\Users\Billy\Dropbox\Thesis\Projects\pwsafe-3.32-src\src\core\..\os\../core/PwsPlatform.h" 0
/*
* Copyright (c) 2003-2013 Rony Shapiro <ronys@users.sourceforge.net>.
* All rights reserved. Use of the code is allowed under the
* Artistic License 2.0 terms, as specified in the LICENSE file
* distributed with this code, or available from
* http://www.opensource.org/licenses/artistic-license-2.0.php
*/
// pws_platform.h
//------------------------------------------------------------------------------
//
// This header file exists to determine, at compile time, which target we're
// compiling to and to make the appropriate #defines and #includes.
//
// The following macros are defined:
//
//    PWS_BIG_ENDIAN    - Defined only if the target CPU is big-endian.
//    PWS_LITTLE_ENDIAN - Defined only if the target CPU is little-endian.
//    PWS_PLATFORM      - A string, the target platform, e.g. "Pocket PC".
//    PWS_PLATFORM_EX   - A string, the target platform, e.g. "Pocket PC 2000".
//    POCKET_PC         - Defined only if target is Pocket PC 2000 or later.
//    POCKET_PC_VER     - Defined only if target is Pocket PC 2000 or later.
//
// Notes:
//
// 1. PWS_BIG_ENDIAN and PWS_LITTLE_ENDIAN are mutually exclusive.
// 2. PWS_BIG_ENDIAN and PWS_LITTLE_ENDIAN may be defined on the complier
//    command line but checks are made to ensure that one and only one is
//    defined.
//
// Supported Configurations:
// -------------------------
//
// Pocket PC:
//
//    2000 ARM
//    2000 MIPS
//    2000 SH3
//    2000 x86 Emulator
//    2002 ARM
//    2002 x86 Emulator
//    2003 ARM (untested)
//    2003 x86 Emulator (untested)
//
// Windows
//
//    Win32 X86
//    Win32 and Win64 x64
//
// Linux - work in progress
// Cygwin - work in progress

                       
                       

                                                             
                                                  
                                 
     
// some globally useful includes for non-Windows
                 
      

                
                  
      

// Following seems needed on Linux/cygwin
                                             
                   
      

// stop MS VC++ 6 and earlier being quite so pedantic
                                                                             
       
      

                   
                

                   
                 
                      
      
                    
                         
      
      

// PWS_BIG_ENDIAN and PWS_LITTLE_ENDIAN can be specified on the 
                           
                     
                      
      

                              
                        
                         
      

                            
                                                 
                                                 
                                                 
                              
                                
                                        
                          
                 
                                                           
                                 
                         
                                     
                         
                                   
                         
                                                                      
                         
      
      
                                                 
                                                 
                                                 
                                  
                                
                                        
                          
                 
                                                           
                                 
                         
                                                                      
                         
      
      
     
      
      
                                                 
                                                 
                                                 
                     
                                                                                                           
                              
                         
      
                                                 
                                                 
                                                 
                      
                            
                                                                 
                         
      
                                                 
                                                  
                                                 
                         
                             
                                          
                         
       
                                             
                                                                                          
                          
                         
                                                                                       
                                                                                    
                   
                                           
                              
     
                              
      
                                                                       
                                                           
                         
     
                      
      
                                                 
                                                 
                                                 
      

// 
                          
      
      

                                                           
      
      

                                                         
      
      

// Following from libtomcrypt, for twofish & SHA256
/* Controls endianess and size of registers.  Leave uncommented to get platform neutral [slower] code 
* 
* Note: in order to use the optimized macros your platform must support unaligned 32 and 64 bit read/writes.
* The x86 platforms allow this but some others [ARM for instance] do not.  On those platforms you **MUST**
* use the portable [slower] macros.
*/

/* detect x86-32 machines somewhat */
                                                                                                                                                                                 
                     
                        
      

/* detects MIPS R5900 processors (PS2) */
                                                                                                                        
                     
                        
      

/* detect amd64 */
                                                                
                     
                        
      

/* #define ENDIAN_LITTLE */
/* #define ENDIAN_BIG */

/* #define ENDIAN_32BITWORD */
/* #define ENDIAN_64BITWORD */

                                                                                                                
      
      

                                                    
                      
      

/* fix for MSVC ...evil! */
               
                            
                                 
     
                           
typedef uint64_t ulong64;
      

/* this is the "32-bit at least" data type 
* Re-define it to suit your platform but it must be at least 32-bits 
*/
                       
                         
     
typedef unsigned long ulong32;
      

/* ---- HELPER MACROS ---- */
                     

                                                                                                                                                                                                                                                                                                           



                                                                                                                                                                                                                                                             





                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   





                                                                                                                                                                                                                                                                                                                                                                                                                                                





                                                                                                                                                                                                                                                                                                           



                                                                                                                                                                                                                                                             











                                                                                                                                                                                                                                                                                                                                                                                                                                                  





       /* ENDIAN_NEUTRAL */

                    

                                                                                                                                                                                                                                                                                                           



                                                                                                                                                                                                                                                             











                                                                                                                                                                                                                                                                                                                                                                                                                                                  





                       

                                                                              


                                                   








                                                                                                                                                                                                                                                                                                                                                                                                                                                





                              

                                                                              


                                                                      


                                                                        


                                                     


                             

       /* ENDIAN_LITTLE */

                 
                                                                                                                                                                                                                                                                                                           



                                                                                                                                                                                                                                                             











                                                                                                                                                                                                                                                                                                                                                                                                                                                  





                       

                                                                              


                                                   








                                                                                                                                                                                                                                                                                                                                                                                                                                                 





                              

                                                                              


                                                                      


                                                                        


                                                     


                             
       /* ENDIAN_BIG */

                                                                                                                         



/* 32-bit Rotates */
                     

                       
                   
       
                            
                            
                             
                             

                                                                                                                   

                                                
 
                     
                
                         
              
 

                                                
 
                     
                
                         
              
 

                   

                                                       
 
                   
                
                         
              
 

                                                       
 
                   
                
                         
              
 

     

                
                

      

     

/* rotates the hard way */
                                                                                                                                                                                                   
                                                                                                                                                                                                   
                                                                                                                                                                                                    
                                                                                                                                                                                                    

      


/* 64-bit Rotates */
                                                                    

                                                            
 
                    
                
                         
              
 

                                                            
 
                    
                
                         
              
 

                   

                                                                   
 
                  
                
                         
              
 

                                                                   
 
                  
                
                         
              
 

                       

                  
                  

      

      /* Not x86_64  */

                                                                                                                                                                       



                                                                                                                                                                                           



                                                                                                                                                                        



                                                                                                                                                                                            



      

          
          
                                       
                                       

/* extract a byte portably */
               
                                                                 
     
                                             
         

                                                           

                                          
                                           
      

       /* __PWSPLATFORM_H */

#__FILE__ _"C:\Users\Billy\Dropbox\Thesis\Projects\pwsafe-3.32-src\src\core\../os/typedefs.h" 46 // for afxwin.h, and endian macros

// Hotkey values. Internal PWS values - need to convert to either MFC or wxWidgets
// values in the GUI when retrieving these from the preferences and aso back to PWS
// internal values before giving them to PWSPrefs for saving in the XML config file.
                                
                                
                                
                                
 
// wxWidgets Only - Not used in Windows MFC
                                                                 
                                
                                
                                

             
                  
                     
                      
                      
                      

                               
                                
                                
                                

                                 
                                 

                          

                     

                                                             
               
               
               

             
                  

                            
                         
                           
                                                              
            
              
      
             
               
      
                    

      /* !defined(_WIN32) */
                  
                     
typedef int8_t  int8;
typedef int16_t int16;
typedef int32_t int32;
typedef int64_t int64;

typedef uint8_t  uint8;
typedef uint16_t uint16;
typedef uint32_t uint32;
typedef uint64_t uint64;

typedef int errno_t;

              
          
                    
      
                      
     
               
typedef char TCHAR;
typedef wchar_t WCHAR;
       /* UNICODE */

// mimic Microsoft conventional typdefs:
typedef TCHAR *LPTSTR;
typedef const TCHAR *LPCTSTR;
typedef bool BOOL;
typedef unsigned char BYTE;
typedef uint16_t WORD;
typedef uint32_t DWORD;
typedef int32_t LONG;
                              
                             
                                                   
                                             
                                          
                                                                                        
                                                                           	
                             
                             
                                                   
                                             
                                          
                                                                                        
                                                                           	
     
      
      
typedef int32_t LPARAM;
typedef unsigned int UINT;
typedef int HANDLE;
                                       

// assorted conveniences:
                           
                                                      
                           
            
                 
      
             
                   
      

/* These two files require the above definitions */
                 
#__FILE__ _"C:\Users\Billy\Dropbox\Thesis\Projects\pwsafe-3.32-src\src\core\..\os\debug.h" 0
/*
* Copyright (c) 2003-2013 Rony Shapiro <ronys@users.sourceforge.net>.
* All rights reserved. Use of the code is allowed under the
* Artistic License 2.0 terms, as specified in the LICENSE file
* distributed with this code, or available from
* http://www.opensource.org/licenses/artistic-license-2.0.php
*/

                  
                  

                    
#__FILE__ _"C:\Users\Billy\Dropbox\Thesis\Projects\pwsafe-3.32-src\src\core\..\os\typedefs.h" 0
/*
* Copyright (c) 2003-2013 Rony Shapiro <ronys@users.sourceforge.net>.
* All rights reserved. Use of the code is allowed under the
* Artistic License 2.0 terms, as specified in the LICENSE file
* distributed with this code, or available from
* http://www.opensource.org/licenses/artistic-license-2.0.php
*/
                   
                   

   
                                                                 
                                                          
                            
 
  

                 
  
                                                                 
                                    
   

                                                                          
                                                               
                              
                              

              
                             
                      
                    
     
                            
                   
               
      

                                                                   

                                                                                  
                                                                                   
                                                                                    
                                
                                
                                
                                
 
                                           
                                                                 
                                
                                
                                

             
                  
                     
                      
                      
                      

                               
                                
                                
                                

                                 
                                 

                          

                     

                                                             
               
               
               

             
                  

                            
                         
                           
                                                              
            
              
      
             
               
      
                    

                            
                   
                      
                     
                      
                      
                      

                       
                        
                        
                        

                    

              
          
                    
      
                      
     
               
                   
                      
                    

                                        
                      
                             
                  
                           
                      
                       
                     
                              
                             
                                                   
                                             
                                          
                                                                                        
                                                                           	
                             
                             
                                                   
                                             
                                          
                                                                                        
                                                                           	
     
      
      
                       
                          
                   
                                       

                         
                           
                                                      
                           
            
                 
      
             
                   
      

                                                   
                  
                           
                   

       /* _TYPEDEFS_H */

#__FILE__ _"C:\Users\Billy\Dropbox\Thesis\Projects\pwsafe-3.32-src\src\core\..\os\debug.h" 14
             
                   
      

namespace pws_os {
  // MFC TRACE equivalent in MFC, non-MFC Windows and non-Windows
  void Trace(LPCTSTR lpszFormat, ...);
  void Trace0(LPCTSTR lpszFormat);

  // Opens a messagebox or write to debugger window 
  // with text of last system error, titlebar
  // is csFunction
  void IssueError(const stringT &csFunction, bool bMsgBox = true);

  /*
    Outputs a printable version of memory dump (hex + ascii)

    parameters:
      pmemory   - pointer to memory to format
      length    - length memory to format in bytes
      cs_prefix - prefix each line with this
      maxnum    - maximum hex characters dumped per line
  */
  void HexDump(unsigned char *pmemory, const int &length,
               const stringT &cs_prefix = "", const int &maxnum = 16);
}

       /* _OSDEBUG_H */

#__FILE__ _"C:\Users\Billy\Dropbox\Thesis\Projects\pwsafe-3.32-src\src\core\../os/typedefs.h" 224
                          
#__FILE__ _"C:\Users\Billy\Dropbox\Thesis\Projects\pwsafe-3.32-src\src\core\..\os\linux/pws_time.h" 0
/*
* Copyright (c) 2003-2013 Rony Shapiro <ronys@users.sourceforge.net>.
* All rights reserved. Use of the code is allowed under the
* Artistic License 2.0 terms, as specified in the LICENSE file
* distributed with this code, or available from
* http://www.opensource.org/licenses/artistic-license-2.0.php
*/
                    
                    

                       
#__FILE__ _"C:\Users\Billy\Dropbox\Thesis\Projects\pwsafe-3.32-src\src\core\..\os\linux\../typedefs.h" 0
/*
* Copyright (c) 2003-2013 Rony Shapiro <ronys@users.sourceforge.net>.
* All rights reserved. Use of the code is allowed under the
* Artistic License 2.0 terms, as specified in the LICENSE file
* distributed with this code, or available from
* http://www.opensource.org/licenses/artistic-license-2.0.php
*/
                   
                   

   
                                                                 
                                                          
                            
 
  

                 
  
                                                                 
                                    
   

                                                                          
                                                               
                              
                              

              
                             
                      
                    
     
                            
                   
               
      

                                                                   

                                                                                  
                                                                                   
                                                                                    
                                
                                
                                
                                
 
                                           
                                                                 
                                
                                
                                

             
                  
                     
                      
                      
                      

                               
                                
                                
                                

                                 
                                 

                          

                     

                                                             
               
               
               

             
                  

                            
                         
                           
                                                              
            
              
      
             
               
      
                    

                            
                   
                      
                     
                      
                      
                      

                       
                        
                        
                        

                    

              
          
                    
      
                      
     
               
                   
                      
                    

                                        
                      
                             
                  
                           
                      
                       
                     
                              
                             
                                                   
                                             
                                          
                                                                                        
                                                                           	
                             
                             
                                                   
                                             
                                          
                                                                                        
                                                                           	
     
      
      
                       
                          
                   
                                       

                         
                           
                                                      
                           
            
                 
      
             
                   
      

                                                   
                  
                           
                   

       /* _TYPEDEFS_H */

#__FILE__ _"C:\Users\Billy\Dropbox\Thesis\Projects\pwsafe-3.32-src\src\core\..\os\linux/pws_time.h" 13
                  
typedef time_t __time32_t;
typedef uint64_t __time64_t;

extern struct tm *gmtime64_r(const __time64_t *timep, struct tm *result);

namespace pws_os {
  /**
   * Workaround the lack of a wchar_t version of asctime()
   */
  extern int asctime(TCHAR *buf, size_t N, const struct tm *tm);
}

       /* __PWS_TIME_H */
//-----------------------------------------------------------------------------
// Local variables:
// mode: c++
// End:

#__FILE__ _"C:\Users\Billy\Dropbox\Thesis\Projects\pwsafe-3.32-src\src\core\../os/typedefs.h" 225
       /* _WIN32 */

       /* _TYPEDEFS_H */

#__FILE__ _"C:\Users\Billy\Dropbox\Thesis\Projects\pwsafe-3.32-src\src\core\StringX.h" 33
                         
#__FILE__ _"C:\Users\Billy\Dropbox\Thesis\Projects\pwsafe-3.32-src\src\core\./PwsPlatform.h" 0
/*
* Copyright (c) 2003-2013 Rony Shapiro <ronys@users.sourceforge.net>.
* All rights reserved. Use of the code is allowed under the
* Artistic License 2.0 terms, as specified in the LICENSE file
* distributed with this code, or available from
* http://www.opensource.org/licenses/artistic-license-2.0.php
*/
// pws_platform.h
//------------------------------------------------------------------------------
//
// This header file exists to determine, at compile time, which target we're
// compiling to and to make the appropriate #defines and #includes.
//
// The following macros are defined:
//
//    PWS_BIG_ENDIAN    - Defined only if the target CPU is big-endian.
//    PWS_LITTLE_ENDIAN - Defined only if the target CPU is little-endian.
//    PWS_PLATFORM      - A string, the target platform, e.g. "Pocket PC".
//    PWS_PLATFORM_EX   - A string, the target platform, e.g. "Pocket PC 2000".
//    POCKET_PC         - Defined only if target is Pocket PC 2000 or later.
//    POCKET_PC_VER     - Defined only if target is Pocket PC 2000 or later.
//
// Notes:
//
// 1. PWS_BIG_ENDIAN and PWS_LITTLE_ENDIAN are mutually exclusive.
// 2. PWS_BIG_ENDIAN and PWS_LITTLE_ENDIAN may be defined on the complier
//    command line but checks are made to ensure that one and only one is
//    defined.
//
// Supported Configurations:
// -------------------------
//
// Pocket PC:
//
//    2000 ARM
//    2000 MIPS
//    2000 SH3
//    2000 x86 Emulator
//    2002 ARM
//    2002 x86 Emulator
//    2003 ARM (untested)
//    2003 x86 Emulator (untested)
//
// Windows
//
//    Win32 X86
//    Win32 and Win64 x64
//
// Linux - work in progress
// Cygwin - work in progress

                       
                       

                                                             
                                                  
                                 
     
                                                
                  
      

                
                   
      

                                         
                                             
                   
      

                                                     
                                                                             
       
      

                   
                

                   
                 
                      
      
                    
                         
      
      

                                                                
                           
                     
                      
      

                              
                        
                         
      

                            
                                                 
                                                 
                                                 
                              
                                
                                        
                          
                 
                                                           
                                 
                         
                                     
                         
                                   
                         
                                                                      
                         
      
      
                                                 
                                                 
                                                 
                                  
                                
                                        
                          
                 
                                                           
                                 
                         
                                                                      
                         
      
      
     
      
      
                                                 
                                                 
                                                 
                     
                                                                                                           
                              
                         
      
                                                 
                                                 
                                                 
                      
                            
                                                                 
                         
      
                                                 
                                                  
                                                 
                         
                             
                                          
                         
       
                                             
                                                                                          
                          
                         
                                                                                       
                                                                                    
                   
                                           
                              
     
                              
      
                                                                       
                                                           
                         
     
                      
      
                                                 
                                                 
                                                 
      

   
                          
      
      

                                                           
      
      

                                                         
      
      

                                                   
                                                                                                      
  
                                                                                                            
                                                                                                          
                                   
  

                                     
                                                                                                                                                                                 
                     
                        
      

                                         
                                                                                                                        
                     
                        
      

                  
                                                                
                     
                        
      

                           
                        

                              
                              

                                                                                                                
      
      

                                                    
                      
      

                           
               
                            
                                 
     
                           
                         
      

                                           
                                                                     
  
                       
                         
     
                              
      

                             
                     

                                                                                                                                                                                                                                                                                                           



                                                                                                                                                                                                                                                             











                                                                                                                                                                                                                                                                                                                                                                                                                                                





                                                                                                                                                                                                                                                                                                           



                                                                                                                                                                                                                                                             











                                                                                                                                                                                                                                                                                                                                                                                                                                                  





                           

                    

                                                                                                                                                                                                                                                                                                           



                                                                                                                                                                                                                                                             











                                                                                                                                                                                                                                                                                                                                                                                                                                                  





                       

                                                                              


                                                   








                                                                                                                                                                                                                                                                                                                                                                                                                                                





                              

                                                                              


                                                                      


                                                                        


                                                     


                             

                          

                 
                                                                                                                                                                                                                                                                                                           



                                                                                                                                                                                                                                                             











                                                                                                                                                                                                                                                                                                                                                                                                                                                  





                       

                                                                              


                                                   








                                                                                                                                                                                                                                                                                                                                                                                                                                                 





                              

                                                                              


                                                                      


                                                                        


                                                     


                             
                       

                                                                                                                         



                    
                     

                       
                   
       
                            
                            
                             
                             

                                                                                                                   

                                                
 
                     
                
                         
              
 

                                                
 
                     
                
                         
              
 

                   

                                                       
 
                   
                
                         
              
 

                                                       
 
                   
                
                         
              
 

     

                
                

      

     

                          
                                                                                                                                                                                                   
                                                                                                                                                                                                   
                                                                                                                                                                                                    
                                                                                                                                                                                                    

      


                    
                                                                    

                                                            
 
                    
                
                         
              
 

                                                            
 
                    
                
                         
              
 

                   

                                                                   
 
                  
                
                         
              
 

                                                                   
 
                  
                
                         
              
 

                       

                  
                  

      

                       

                                                                                                                                                                       



                                                                                                                                                                                           



                                                                                                                                                                        



                                                                                                                                                                                            



      

          
          
                                       
                                       

                             
               
                                                                 
     
                                             
         

                                                           

                                          
                                           
      

       /* __PWSPLATFORM_H */

#__FILE__ _"C:\Users\Billy\Dropbox\Thesis\Projects\pwsafe-3.32-src\src\core\StringX.h" 34

namespace S_Alloc
{
  template <typename T>
    class SecureAlloc
    {
    public:
      // Typedefs
      typedef size_t    size_type;
      typedef ptrdiff_t difference_type;
      typedef T*        pointer;
      typedef const T*  const_pointer;
      typedef T&        reference;
      typedef const T&  const_reference;
      typedef T         value_type;

    public:
      // Constructors
      SecureAlloc() throw() {}
      SecureAlloc(const SecureAlloc&) throw() {}

      template <typename U>
        SecureAlloc(const SecureAlloc<U>&) throw() {}

      SecureAlloc& operator=(const SecureAlloc&) {
        return *this;
      }

      // Destructor
      ~SecureAlloc() throw() {}

      // Utility functions
      pointer address(reference r) const {
        return (&r);
      }

      const_pointer address(const_reference c) const {
        return (&c);
      }

      size_type max_size() const {
        return (std::numeric_limits<size_t>::max)() / sizeof(T);
      }

      // In-place construction
      void construct(pointer p, const_reference c) {
        // placement new operator
        new(reinterpret_cast<void *>(p)) T(c);
      }

      // In-place destruction
      void destroy(pointer p) const {
        // call destructor directly
        (p)->T::~T();
      }

      // Rebind to allocators of other types
      template <typename U>
        struct rebind {
          typedef SecureAlloc<U> other;
        };

      // Allocate raw memory
      pointer allocate(size_type n, const_pointer hint = 0) {
        (void)(hint);
        pointer p = static_cast<pointer>(std::malloc(n * sizeof(T)));
        // pws_os::Trace(_T("Securely Allocated %d bytes at %p\n"), n * sizeof(T), p);
        if (p == NULL)
          throw std::bad_alloc();
        return p;
      }

      // Free raw memory.
      // Note that C++ standard defines this function as:
      //   deallocate(pointer p, size_type n).
      void deallocate(pointer p, size_type n) {
        // assert(p != NULL);
        // The standard states that p must not be NULL. However, some
        // STL implementations fail this requirement, so the check must
        // be made here.
        if (p == NULL)
          return;

        if (n > 0) {
          const size_type N = n * sizeof(T);
          std::memset(p, 0x55, N);
          std::memset(p, 0xAA, N);
          std::memset(p,    0, N);
        }
        std::free(p);
      }

    private:
      // No data

    }; // end of SecureAlloc

  // Comparison
  template <typename T1, typename T2>
    bool operator==(const SecureAlloc<T1>&,
                    const SecureAlloc<T2>&) throw() {
    return true;
  }

  template <typename T1, typename T2>
    bool operator!=(const SecureAlloc<T1>&,
                    const SecureAlloc<T2>&) throw() {
    return false;
  }

} // end namespace S_Alloc

              
                                  
                                                    
                                                                  
     
typedef std::basic_string<char,
                          std::char_traits<char>,
                          S_Alloc::SecureAlloc<char> > StringX;
      

// Following should really be StringX member functions, but there's no 
// elegant way of extending a template class without public inheritance, 
// including duplicating large parts of the interface
//
// Since we need the for stringT as well, we might as well templatize them
// (In for a dime, in for a $).

template<class T> int CompareNoCase(const T &s1, const T &s2);
template<class T> int CompareCase(const T &s1, const T &s2);
template<class T> void ToLower(T &s);
template<class T> void ToUpper(T &s);
template<class T> T &TrimRight(T &s, const TCHAR *set = NULL);
template<class T> T &TrimLeft(T &s, const TCHAR *set = NULL);
template<class T> T &Trim(T &s, const TCHAR *set = NULL);
template<class T> void EmptyIfOnlyWhiteSpace(T &s);
template<class T> int Replace(T &s, TCHAR from, TCHAR to);
template<class T> int Replace(T &s, const T &from, const T &to);
template<class T> int Remove(T &s, TCHAR c);
template<class T> void Format(T &s, const TCHAR *fmt, ...);
template<class T> void Format(T &s, int fmt, ...);
template<class T> void LoadAString(T &s, int id);

inline stringT stringx2std(const StringX &str) { return stringT(str.data(), str.size()); }
inline StringX std2stringx(const stringT& str)   { return StringX(str.data(), str.size()); }

       /* __STRINGX_H */
//-----------------------------------------------------------------------------
// Local variables:
// mode: c++
// End:

#__FILE__ _"C:\Users\Billy\Dropbox\Thesis\Projects\pwsafe-3.32-src\src\core/ItemField.h" 18

//-----------------------------------------------------------------------------

/*
* CItemField contains the data for a given CItemData field in encrypted
* form.
* Set() encrypts, Get() decrypts
*/

class Fish;

class CItemField
{
public:
  explicit CItemField(unsigned char type = 0xff): m_Type(type), m_Length(0), m_Data(NULL)
  {}
  CItemField(const CItemField &that); // copy ctor
  ~CItemField() {if (m_Length > 0) delete[] m_Data;}

  CItemField &operator=(const CItemField &that);

  void Set(const StringX &value, Fish *bf, unsigned char type = 0xff);
  void Set(const unsigned char* value, size_t length, Fish *bf, unsigned char type = 0xff);

  void Get(StringX &value, Fish *bf) const;
  void Get(unsigned char *value, size_t &length, Fish *bf) const;
  unsigned char GetType() const {return m_Type;}
  size_t GetLength() const {return m_Length;}
  bool IsEmpty() const {return m_Length == 0;}
  void Empty();

private:
  //Number of 8 byte blocks needed for size
  size_t GetBlockSize(size_t size) const;

  unsigned char m_Type; // almost const
  size_t m_Length;
  unsigned char *m_Data;
};

       /* __ITEMFIELD_H */
//-----------------------------------------------------------------------------
// Local variables:
// mode: c++
// End:

#__FILE__ _"C:\Users\Billy\Dropbox\Thesis\Projects\pwsafe-3.32-src\src\test\ItemFieldTest.h" 10
                         
#__FILE__ _"C:\Users\Billy\Dropbox\Thesis\Projects\pwsafe-3.32-src\src\core/BlowFish.h" 0
/*
* Copyright (c) 2003-2013 Rony Shapiro <ronys@users.sourceforge.net>.
* All rights reserved. Use of the code is allowed under the
* Artistic License 2.0 terms, as specified in the LICENSE file
* distributed with this code, or available from
* http://www.opensource.org/licenses/artistic-license-2.0.php
*/
// BlowFish.h
//-----------------------------------------------------------------------------
                    
                    

                
#__FILE__ _"C:\Users\Billy\Dropbox\Thesis\Projects\pwsafe-3.32-src\src\core\Fish.h" 0
/*
* Copyright (c) 2003-2013 Rony Shapiro <ronys@users.sourceforge.net>.
* All rights reserved. Use of the code is allowed under the
* Artistic License 2.0 terms, as specified in the LICENSE file
* distributed with this code, or available from
* http://www.opensource.org/licenses/artistic-license-2.0.php
*/
// Fish.h
                
                

/**
* Fish is an abstract base class for BlowFish and TwoFish
* (and for any block cipher, but it's cooler to call it "Fish"
* rather than "Cipher"...)
*/

class Fish
{
public:
  Fish() {}
  virtual ~Fish() {}
  virtual unsigned int GetBlockSize() const = 0;
  // Following encrypt/decrypt a single block
  // (blocksize dependent on cipher)
  virtual void Encrypt(const unsigned char *pt, unsigned char *ct) = 0;
  virtual void Decrypt(const unsigned char *ct, unsigned char *pt) = 0;
};

       /* __FISH_H */

#__FILE__ _"C:\Users\Billy\Dropbox\Thesis\Projects\pwsafe-3.32-src\src\core/BlowFish.h" 17
                       
#__FILE__ _"C:\Users\Billy\Dropbox\Thesis\Projects\pwsafe-3.32-src\src\os/typedefs.h" 0
/*
* Copyright (c) 2003-2013 Rony Shapiro <ronys@users.sourceforge.net>.
* All rights reserved. Use of the code is allowed under the
* Artistic License 2.0 terms, as specified in the LICENSE file
* distributed with this code, or available from
* http://www.opensource.org/licenses/artistic-license-2.0.php
*/
                   
                   

   
                                                                 
                                                          
                            
 
  

                 
  
                                                                 
                                    
   

                                                                          
                                                               
                              
                              

              
                             
                      
                    
     
                            
                   
               
      

                                                                   

                                                                                  
                                                                                   
                                                                                    
                                
                                
                                
                                
 
                                           
                                                                 
                                
                                
                                

             
                  
                     
                      
                      
                      

                               
                                
                                
                                

                                 
                                 

                          

                     

                                                             
               
               
               

             
                  

                            
                         
                           
                                                              
            
              
      
             
               
      
                    

                            
                   
                      
                     
                      
                      
                      

                       
                        
                        
                        

                    

              
          
                    
      
                      
     
               
                   
                      
                    

                                        
                      
                             
                  
                           
                      
                       
                     
                              
                             
                                                   
                                             
                                          
                                                                                        
                                                                           	
                             
                             
                                                   
                                             
                                          
                                                                                        
                                                                           	
     
      
      
                       
                          
                   
                                       

                         
                           
                                                      
                           
            
                 
      
             
                   
      

                                                   
                  
                           
                   

       /* _TYPEDEFS_H */

#__FILE__ _"C:\Users\Billy\Dropbox\Thesis\Projects\pwsafe-3.32-src\src\core/BlowFish.h" 18

class BlowFish : public Fish
{
public:
  static BlowFish *MakeBlowFish(const unsigned char *pass, int passlen,
                                const unsigned char *salt, int saltlen);

  enum {BLOCKSIZE = 8};

  BlowFish(const unsigned char* key, int keylen);
  virtual ~BlowFish();
  virtual void Encrypt(const unsigned char *in, unsigned char *out);
  virtual void Decrypt(const unsigned char *in, unsigned char *out);
  virtual unsigned int GetBlockSize() const {return BLOCKSIZE;}

private:
  enum {bf_N = 16};
  uint32 bf_S[4][256];
  uint32 bf_P[bf_N + 2];
  static const uint32 tempbf_S[4][256];
  static const uint32 tempbf_P[bf_N + 2];
  void Blowfish_encipher(uint32* xl, uint32* xr);
  void Blowfish_decipher(uint32* xl, uint32* xr);
  void InitializeBlowfish(const unsigned char key[], short keybytes);
};
       /* __BLOWFISH_H */
//-----------------------------------------------------------------------------
// Local variables:
// mode: c++
// End:

#__FILE__ _"C:\Users\Billy\Dropbox\Thesis\Projects\pwsafe-3.32-src\src\test\ItemFieldTest.h" 11


class NullFish : public Fish
{
public:
  NullFish() {}
  virtual ~NullFish() {}
virtual unsigned int GetBlockSize() const {return 8;}
  // Following encrypt/decrypt a single block
  // (blocksize dependent on cipher)
  virtual void Encrypt(const unsigned char *pt, unsigned char *ct)
  {memcpy(ct, pt, GetBlockSize());}
  virtual void Decrypt(const unsigned char *ct, unsigned char *pt)
  {memcpy(pt, ct, GetBlockSize());}
};

class ItemFieldTest : public Test
{

public:
  ItemFieldTest()
    {
     
      unsigned char sessionkey[64] = {
        0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
        0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18,
        0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28,
        0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38,
        0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48,
        0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58,
        0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68,
        0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78,
      };
      unsigned char salt[20] = {
        0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89,
        0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99,
      };
      m_bf = BlowFish::MakeBlowFish(sessionkey, sizeof(sessionkey),
                                    salt, sizeof(salt));
     
                          
       
  }
  ~ItemFieldTest() {delete m_bf;}

  void run()
  {
    // The tests to run:
    testMe();
  }

  void testMe()
  {
    unsigned char v1[16] = {0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7,
                            0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf};
    unsigned char v2[16] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,};
    size_t lenV2 = sizeof(v2);
    
    CItemField i1(1);
    do_test(i1.IsEmpty(), "cond", "C:\\Users\\Billy\\Dropbox\\Thesis\\Projects\\pwsafe-3.32-src\\src\\test\\ItemFieldTest.h", 72);
    do_test(i1.GetType() == 1, "cond", "C:\\Users\\Billy\\Dropbox\\Thesis\\Projects\\pwsafe-3.32-src\\src\\test\\ItemFieldTest.h", 73);
    i1.Set(v1, sizeof(v1), m_bf);
    i1.Get(v2, lenV2, m_bf);
    do_test(lenV2 == sizeof(v1), "cond", "C:\\Users\\Billy\\Dropbox\\Thesis\\Projects\\pwsafe-3.32-src\\src\\test\\ItemFieldTest.h", 76);
    do_test(memcmp(v1, v2, sizeof(v1)) == 0, "cond", "C:\\Users\\Billy\\Dropbox\\Thesis\\Projects\\pwsafe-3.32-src\\src\\test\\ItemFieldTest.h", 77);
  }
 private:
  Fish *m_bf;
};
